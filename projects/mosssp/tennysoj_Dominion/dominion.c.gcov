        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3969780 returned 100% blocks executed 83%
  3969780:    8:int compare(const void* a, const void* b) {
  3969780:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 3969780
    #####:   10:    return 1;
  3969780:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 1058608 (fallthrough)
branch  1 taken 2911172
  1058608:   12:    return -1;
  2911172:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 66174 returned 100% blocks executed 92%
    66174:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    66174:   44:  SelectStream(1);
call    0 returned 66174
    66174:   45:  PutSeed((long)randomSeed);
call    0 returned 66174
        -:   46:  
        -:   47:  //check number of players
    66174:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 66174 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 66174
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    66174:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   727914:   57:  for (i = 0; i < 10; i++)
branch  0 taken 661740
branch  1 taken 66174 (fallthrough)
        -:   58:    {
  7279140:   59:      for (j = 0; j < 10; j++)
branch  0 taken 6617400
branch  1 taken 661740 (fallthrough)
        -:   60:        {
  6617400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 5955660 (fallthrough)
branch  1 taken 661740
branch  2 taken 0 (fallthrough)
branch  3 taken 5955660
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    66174:   73:  if (numPlayers == 2)
branch  0 taken 22 (fallthrough)
branch  1 taken 66152
        -:   74:    {
       22:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    66152:   77:  else if (numPlayers == 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 66152
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    66152:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    66174:   87:  if (numPlayers == 2)
branch  0 taken 22 (fallthrough)
branch  1 taken 66152
        -:   88:    {
       22:   89:      state->supplyCount[estate] = 8;
       22:   90:      state->supplyCount[duchy] = 8;
       22:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    66152:   95:      state->supplyCount[estate] = 12;
    66152:   96:      state->supplyCount[duchy] = 12;
    66152:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    66174:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    66174:  102:  state->supplyCount[silver] = 40;
    66174:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  1389654:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 1323480
branch  1 taken 66174 (fallthrough)
        -:  107:    {
 10918710:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 10256970
branch  1 taken 661740 (fallthrough)
        -:  109:	{
 10256970:  110:	  if (kingdomCards[j] == i)
branch  0 taken 661740 (fallthrough)
branch  1 taken 9595230
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   661740:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 595588 (fallthrough)
branch  1 taken 66152
branch  2 taken 66152 (fallthrough)
branch  3 taken 529436
        -:  114:		{
   264608:  115:		  if (numPlayers == 2){ 
branch  0 taken 0 (fallthrough)
branch  1 taken 132304
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
   132304:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   529436:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   661740:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  9595230:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   330826:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264652
branch  1 taken 66174 (fallthrough)
        -:  139:    {
   264652:  140:      state->deckCount[i] = 0;
  1058608:  141:      for (j = 0; j < 3; j++)
branch  0 taken 793956
branch  1 taken 264652 (fallthrough)
        -:  142:	{
   793956:  143:	  state->deck[i][j] = estate;
   793956:  144:	  state->deckCount[i]++;
        -:  145:	}
  2117216:  146:      for (j = 3; j < 10; j++)
branch  0 taken 1852564
branch  1 taken 264652 (fallthrough)
        -:  147:	{
  1852564:  148:	  state->deck[i][j] = copper;
  1852564:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   330826:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264652
branch  1 taken 66174 (fallthrough)
        -:  155:    {
   264652:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 264652
branch  1 taken 0 (fallthrough)
branch  2 taken 264652
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   330826:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264652
branch  1 taken 66174 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   264652:  166:      state->handCount[i] = 0;
   264652:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  1852872:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 1786698
branch  1 taken 66174 (fallthrough)
        -:  177:    {
  1786698:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    66174:  182:  state->outpostPlayed = 0;
    66174:  183:  state->phase = 0;
    66174:  184:  state->numActions = 1;
    66174:  185:  state->numBuys = 1;
    66174:  186:  state->playedCardCount = 0;
    66174:  187:  state->whoseTurn = 0;
    66174:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   397044:  192:  for (it = 0; it < 5; it++){
branch  0 taken 330870
branch  1 taken 66174 (fallthrough)
   330870:  193:    drawCard(state->whoseTurn, state);
call    0 returned 330870
        -:  194:  }
        -:  195:
    66174:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 66174
        -:  197:
    66174:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 265672 returned 100% blocks executed 100%
   265672:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   265672:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   265672:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1016 (fallthrough)
branch  1 taken 264656
     1016:  210:    return -1;
   264656:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 264656
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  3175836:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 2646524
branch  1 taken 264656 (fallthrough)
  2646524:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 2646524
  2646524:  216:    newDeck[newDeckPos] = state->deck[player][card];
  2646524:  217:    newDeckPos++;
  8667610:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 6021086
branch  1 taken 2646524 (fallthrough)
  6021086:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  2646524:  221:    state->deckCount[player]--;
        -:  222:  }
  2911180:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 2646524
branch  1 taken 264656 (fallthrough)
  2646524:  224:    state->deck[player][i] = newDeck[i];
  2646524:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   264656:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 18 returned 100% blocks executed 73%
       18:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       18:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       18:  237:  if (state->phase != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 18
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       18:  243:  if ( state->numActions < 1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 18
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       18:  249:  card = handCard(handPos, state);
call    0 returned 18
        -:  250:	
        -:  251:  //check if selected card is an action
       18:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 18 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 18
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       18:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 18
branch  1 taken 0 (fallthrough)
branch  2 taken 18
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       18:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       18:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 18
        -:  268:	
       18:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 18 returned 100% blocks executed 100%
       18:  315:int handCard(int handPos, struct gameState *state) {
       18:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 18
       18:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 444 returned 100% blocks executed 100%
      444:  320:int supplyCount(int card, struct gameState *state) {
      444:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 40 returned 100% blocks executed 100%
       40:  346:int whoseTurn(struct gameState *state) {
       40:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 331509 returned 100% blocks executed 100%
   331509:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   331509:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 519 (fallthrough)
branch  1 taken 330990
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      523:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 4
branch  1 taken 519 (fallthrough)
        4:  534:      state->deck[player][i] = state->discard[player][i];
        4:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      519:  538:    state->deckCount[player] = state->discardCount[player];
      519:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      519:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 519
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      519:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      519:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      519:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      519:  559:    if (deckCounter == 0)
branch  0 taken 515 (fallthrough)
branch  1 taken 4
      515:  560:      return -1;
        -:  561:
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:    state->deckCount[player]--;
        4:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   330990:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   330990:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   330990:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   330990:  576:    state->deckCount[player]--;
   330990:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   330994:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
    #####:  587:    case curse:
    #####:  588:      return 0;
    #####:  589:    case estate:
    #####:  590:      return 2;
    #####:  591:    case duchy:
    #####:  592:      return 5;
    #####:  593:    case province:
    #####:  594:      return 8;
    #####:  595:    case copper:
    #####:  596:      return 0;
    #####:  597:    case silver:
    #####:  598:      return 3;
    #####:  599:    case gold:
    #####:  600:      return 6;
    #####:  601:    case adventurer:
    #####:  602:      return 6;
    #####:  603:    case council_room:
    #####:  604:      return 5;
    #####:  605:    case feast:
    #####:  606:      return 4;
    #####:  607:    case gardens:
    #####:  608:      return 4;
    #####:  609:    case mine:
    #####:  610:      return 5;
    #####:  611:    case remodel:
    #####:  612:      return 4;
    #####:  613:    case smithy:
    #####:  614:      return 4;
    #####:  615:    case village:
    #####:  616:      return 3;
    #####:  617:    case baron:
    #####:  618:      return 4;
    #####:  619:    case great_hall:
    #####:  620:      return 3;
    #####:  621:    case minion:
    #####:  622:      return 5;
    #####:  623:    case steward:
    #####:  624:      return 3;
    #####:  625:    case tribute:
    #####:  626:      return 5;
    #####:  627:    case ambassador:
    #####:  628:      return 3;
    #####:  629:    case cutpurse:
    #####:  630:      return 4;
    #####:  631:    case embargo: 
    #####:  632:      return 2;
    #####:  633:    case outpost:
    #####:  634:      return 5;
    #####:  635:    case salvager:
    #####:  636:      return 4;
    #####:  637:    case sea_hag:
    #####:  638:      return 4;
    #####:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function playAdventurer called 4 returned 100% blocks executed 100%
        4:  646:int playAdventurer(int drawntreasure, int currentPlayer, int cardDrawn, int *temphand, int z, struct gameState *state) {
      515:  647:	while (drawntreasure<2) {
branch  0 taken 507
branch  1 taken 4 (fallthrough)
      507:  648:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 501 (fallthrough)
branch  1 taken 6
      501:  649:			shuffle(currentPlayer, state);
call    0 returned 501
        -:  650:		}
      507:  651:		drawCard(currentPlayer, state);
call    0 returned 507
      507:  652:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
      507:  653:		if (cardDrawn == copper || cardDrawn == gold)
branch  0 taken 499 (fallthrough)
branch  1 taken 8
branch  2 taken 0 (fallthrough)
branch  3 taken 499
        8:  654:			drawntreasure++;
        -:  655:		else {
      499:  656:			temphand[z] = cardDrawn;
      499:  657:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      499:  658:			z++;
        -:  659:		}
        -:  660:	}
      507:  661:	while (z - 1 >= 0) {
branch  0 taken 499
branch  1 taken 4 (fallthrough)
      499:  662:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
      499:  663:		z = z - 1;
        -:  664:	}
        4:  665:	return 0;
        -:  666:}
        -:  667:
function playSmithy called 10 returned 100% blocks executed 100%
       10:  668:int playSmithy(int i, int currentPlayer, int handPos, struct gameState *state) {
        -:  669:	//+3 Cards
       40:  670:	for (i = 0; i < 3; i++)
branch  0 taken 30
branch  1 taken 10 (fallthrough)
        -:  671:	{
       30:  672:		drawCard(currentPlayer, state);
call    0 returned 30
        -:  673:	}
        -:  674:
        -:  675:	//discard card from hand
       10:  676:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 10
       10:  677:	return 0;
        -:  678:}
        -:  679:
function playVillage called 4 returned 100% blocks executed 100%
        4:  680:int playVillage(int currentPlayer, int handPos, struct gameState *state) {
        -:  681:	//+1 Card
        4:  682:	drawCard(currentPlayer, state);
call    0 returned 4
        -:  683:
        -:  684:	//+2 Actions
        4:  685:	state->numActions = 2;
        -:  686:
        -:  687:	//discard played card from hand
        4:  688:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        4:  689:	return 0;
        -:  690:}
        -:  691:
function playMinion called 0 returned 0% blocks executed 0%
    #####:  692:int playMinion(int i, int j, int currentPlayer, int handPos, int choice1, int choice2, struct gameState *state) {
        -:  693:	//+1 action
    #####:  694:	state->numActions++;
        -:  695:
        -:  696:	//discard card from hand
    #####:  697:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:	if (1)		//+2 coins
        -:  700:	{
    #####:  701:		state->coins = state->coins + 2;
        -:  702:	}
        -:  703:
        -:  704:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  705:	{
        -:  706:		//discard hand
        -:  707:		while (numHandCards(state) > 0)
        -:  708:		{
        -:  709:			discardCard(handPos, currentPlayer, state, 0);
        -:  710:		}
        -:  711:
        -:  712:		//draw 4
        -:  713:		for (i = 0; i < 4; i++)
        -:  714:		{
        -:  715:			drawCard(currentPlayer, state);
        -:  716:		}
        -:  717:
        -:  718:		//other players discard hand and redraw if hand size > 4
        -:  719:		for (i = 0; i < state->numPlayers; i++)
        -:  720:		{
        -:  721:			if (i != currentPlayer)
        -:  722:			{
        -:  723:				if (state->handCount[i] > 4)
        -:  724:				{
        -:  725:					//discard hand
        -:  726:					while (state->handCount[i] > 0)
        -:  727:					{
        -:  728:						discardCard(handPos, i, state, 0);
        -:  729:					}
        -:  730:
        -:  731:					//draw 4
        -:  732:					for (j = 0; j < 4; j++)
        -:  733:					{
        -:  734:						drawCard(i, state);
        -:  735:					}
        -:  736:				}
        -:  737:			}
        -:  738:		}
        -:  739:
        -:  740:	}
    #####:  741:	return 0;
        -:  742:}
        -:  743:
function playCutpurse called 0 returned 0% blocks executed 0%
    #####:  744:int playCutpurse(int i, int j, int k, int currentPlayer, int handPos, struct gameState *state) {
    #####:  745:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  746:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  747:	{
    #####:  748:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  749:		{
    #####:  750:			for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  751:			{
    #####:  752:				if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  753:				{
    #####:  754:					discardCard(j, i, state, 0);
call    0 never executed
    #####:  755:					break;
        -:  756:				}
    #####:  757:				if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  758:				{
    #####:  759:					for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  760:					{
        -:  761:						if (DEBUG)
        -:  762:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  763:					}
    #####:  764:					break;
        -:  765:				}
        -:  766:			}
        -:  767:
        -:  768:		}
        -:  769:
        -:  770:	}
        -:  771:
        -:  772:	//discard played card from hand
    #####:  773:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  774:
    #####:  775:	return 0;
        -:  776:}
        -:  777:
        -:  778:
        -:  779:
function cardEffect called 22 returned 100% blocks executed 11%
       22:  780:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  781:{
       22:  782:  int i = 0;
       22:  783:  int j = 0;
       22:  784:  int k = 0;
        -:  785:  int x;
        -:  786:  int index;
       22:  787:  int currentPlayer = whoseTurn(state);
call    0 returned 22
       22:  788:  int nextPlayer = currentPlayer + 1;
        -:  789:
       22:  790:  int tributeRevealedCards[2] = {-1, -1};
        -:  791:  int temphand[MAX_HAND];// moved above the if statement
       22:  792:  int drawntreasure=0;
       22:  793:  int cardDrawn = 0;
       22:  794:  int z = 0;// this is the counter for the temp hand
       22:  795:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 11 (fallthrough)
branch  1 taken 11
       11:  796:    nextPlayer = 0;
        -:  797:  }
        -:  798:  
        -:  799:	
        -:  800:  //uses switch to select card and perform actions
       22:  801:  switch( card ) 
branch  0 taken 4
branch  1 taken 4
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 10
branch  7 taken 4
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  802:    {
        4:  803:    case adventurer:
        -:  804:		//Custom function 1/5: Adventurer
        4:  805:		playAdventurer(drawntreasure, currentPlayer, cardDrawn, temphand, z, state);
call    0 returned 4
        4:  806:		return 0;
        -:  807:			
        4:  808:    case council_room:
        -:  809:      //+4 Cards
       20:  810:      for (i = 0; i < 4; i++)
branch  0 taken 16
branch  1 taken 4 (fallthrough)
        -:  811:	{
       16:  812:	  drawCard(currentPlayer, state);
call    0 returned 16
        -:  813:	}
        -:  814:			
        -:  815:      //+1 Buy
        4:  816:      state->numBuys++;
        -:  817:			
        -:  818:      //Each other player draws a card
       12:  819:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        -:  820:	{
        8:  821:	  if ( i != currentPlayer )
branch  0 taken 4 (fallthrough)
branch  1 taken 4
        -:  822:	    {
        4:  823:	      drawCard(i, state);
call    0 returned 4
        -:  824:	    }
        -:  825:	}
        -:  826:			
        -:  827:      //put played card in played card pile
        4:  828:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        -:  829:			
        4:  830:      return 0;
        -:  831:			
    #####:  832:    case feast:
        -:  833:      //gain card with cost up to 5
        -:  834:      //Backup hand
    #####:  835:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  836:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  837:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  838:      }
        -:  839:      //Backup hand
        -:  840:
        -:  841:      //Update Coins for Buy
    #####:  842:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  843:      x = 1;//Condition to loop on
    #####:  844:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  845:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  846:	  if (DEBUG)
        -:  847:	    printf("None of that card left, sorry!\n");
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  851:	  }
        -:  852:	}
    #####:  853:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  854:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  858:	  }
        -:  859:	}
        -:  860:	else{
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
    #####:  866:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  867:	  x = 0;//No more buying cards
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
        -:  873:	}
        -:  874:      }     
        -:  875:
        -:  876:      //Reset Hand
    #####:  877:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  878:	state->hand[currentPlayer][i] = temphand[i];
    #####:  879:	temphand[i] = -1;
        -:  880:      }
        -:  881:      //Reset Hand
        -:  882:      			
    #####:  883:      return 0;
        -:  884:			
    #####:  885:    case gardens:
    #####:  886:      return -1;
        -:  887:			
    #####:  888:    case mine:
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:		
    #####:  896:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  897:	{
    #####:  898:	  return -1;
        -:  899:	}
        -:  900:
    #####:  901:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  902:	{
    #####:  903:	  return -1;
        -:  904:	}
        -:  905:
    #####:  906:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  907:
        -:  908:      //discard card from hand
    #####:  909:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  910:
        -:  911:      //discard trashed card
    #####:  912:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  913:	{
    #####:  914:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  915:	    {
    #####:  916:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  917:	      break;
        -:  918:	    }
        -:  919:	}
        -:  920:			
    #####:  921:      return 0;
        -:  922:			
    #####:  923:    case remodel:
    #####:  924:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  925:
    #####:  926:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  927:	{
    #####:  928:	  return -1;
        -:  929:	}
        -:  930:
    #####:  931:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  932:
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  935:
        -:  936:      //discard trashed card
    #####:  937:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  940:	    {
    #####:  941:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  942:	      break;
        -:  943:	    }
        -:  944:	}
        -:  945:
        -:  946:
    #####:  947:      return 0;
        -:  948:		
       10:  949:    case smithy:
        -:  950:		//Custom function 2/5: Smithy
       10:  951:		playSmithy(i, currentPlayer, handPos, state);
call    0 returned 10
       10:  952:		return 0;
        -:  953:		
        4:  954:    case village:
        -:  955:		//Custom function 3/5: Village
        4:  956:		playVillage(currentPlayer, handPos, state);
call    0 returned 4
        4:  957:		return 0;
        -:  958:		
    #####:  959:    case baron:
    #####:  960:      state->numBuys++;//Increase buys by 1!
    #####:  961:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  962:	int p = 0;//Iterator for hand!
    #####:  963:	int card_not_discarded = 1;//Flag for discard set!
    #####:  964:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  965:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  966:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  967:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  968:	    state->discardCount[currentPlayer]++;
    #####:  969:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  970:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  971:	    }
    #####:  972:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  973:	    state->handCount[currentPlayer]--;
    #####:  974:	    card_not_discarded = 0;//Exit the loop
        -:  975:	  }
    #####:  976:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  977:	    if(DEBUG) {
        -:  978:	      printf("No estate cards in your hand, invalid choice\n");
        -:  979:	      printf("Must gain an estate if there are any\n");
        -:  980:	    }
    #####:  981:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  982:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  983:	      state->supplyCount[estate]--;//Decrement estates
    #####:  984:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  985:		isGameOver(state);
call    0 never executed
        -:  986:	      }
        -:  987:	    }
    #####:  988:	    card_not_discarded = 0;//Exit the loop
        -:  989:	  }
        -:  990:			    
        -:  991:	  else{
    #####:  992:	    p++;//Next card
        -:  993:	  }
        -:  994:	}
        -:  995:      }
        -:  996:			    
        -:  997:      else{
    #####:  998:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  999:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1000:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1001:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:	    isGameOver(state);
call    0 never executed
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      
    #####: 1008:      return 0;
        -: 1009:		
    #####: 1010:    case great_hall:
        -: 1011:      //+1 Card
    #####: 1012:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1013:			
        -: 1014:      //+1 Actions
    #####: 1015:      state->numActions++;
        -: 1016:			
        -: 1017:      //discard card from hand
    #####: 1018:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1019:      return 0;
        -: 1020:		
    #####: 1021:    case minion:
        -: 1022:		//Custom function 4/5: Minion
    #####: 1023:		playMinion(i, j, currentPlayer, handPos, choice1, choice2, state);
call    0 never executed
    #####: 1024:		return 0;
        -: 1025:		
    #####: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
        -: 1029:	  //+2 cards
    #####: 1030:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1031:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1032:	}
    #####: 1033:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
        -: 1035:	  //+2 coins
    #####: 1036:	  state->coins = state->coins + 2;
        -: 1037:	}
        -: 1038:      else
        -: 1039:	{
        -: 1040:	  //trash 2 cards in hand
    #####: 1041:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1042:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1043:	}
        -: 1044:			
        -: 1045:      //discard card from hand
    #####: 1046:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1047:      return 0;
        -: 1048:		
    #####: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1051:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	  state->deckCount[nextPlayer]--;
        -: 1054:	}
    #####: 1055:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:	  state->discardCount[nextPlayer]--;
        -: 1058:	}
        -: 1059:	else{
        -: 1060:	  //No Card to Reveal
        -: 1061:	  if (DEBUG){
        -: 1062:	    printf("No cards to reveal\n");
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:	    
        -: 1067:      else{
    #####: 1068:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1070:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:	    state->deckCount[nextPlayer]++;
    #####: 1072:	    state->discard[nextPlayer][i] = -1;
    #####: 1073:	    state->discardCount[nextPlayer]--;
        -: 1074:	  }
        -: 1075:			    
    #####: 1076:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1077:	} 
    #####: 1078:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
    #####: 1081:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
        -: 1084:      }    
        -: 1085:		       
    #####: 1086:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1087:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:	state->playedCardCount++;
    #####: 1089:	tributeRevealedCards[1] = -1;
        -: 1090:      }
        -: 1091:
    #####: 1092:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1093:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        -: 1096:		    
    #####: 1097:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1098:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1099:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1100:	}
        -: 1101:	else{//Action Card
    #####: 1102:	  state->numActions = state->numActions + 2;
        -: 1103:	}
        -: 1104:      }
        -: 1105:	    
    #####: 1106:      return 0;
        -: 1107:		
    #####: 1108:    case ambassador:
    #####: 1109:      j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
    #####: 1116:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1124:	    {
    #####: 1125:	      j++;
        -: 1126:	    }
        -: 1127:	}
    #####: 1128:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;				
        -: 1131:	}
        -: 1132:
        -: 1133:      if (DEBUG) 
        -: 1134:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:      //increase supply count for choosen card by amount being discarded
    #####: 1137:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:			
        -: 1139:      //each other player gains a copy of revealed card
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1145:	    }
        -: 1146:	}
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1150:
        -: 1151:      //trash copies of cards returned to supply
    #####: 1152:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
    #####: 1154:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1157:		{
    #####: 1158:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:		  break;
        -: 1160:		}
        -: 1161:	    }
        -: 1162:	}			
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:		
    #####: 1166:    case cutpurse:
        -: 1167:		//Custom function 5/5: Cutpurse
    #####: 1168:		playCutpurse(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1169:		return 0;
        -: 1170:
    #####: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
    #####: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
    #####: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
    #####: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
    #####: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 98 returned 100% blocks executed 89%
       98: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       98: 1260:  if (trashFlag < 1)
branch  0 taken 48 (fallthrough)
branch  1 taken 50
        -: 1261:    {
        -: 1262:      //add card to played pile
       48: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       48: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       98: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       98: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 6 (fallthrough)
branch  1 taken 92
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
        6: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
       92: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 92
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       92: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       92: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       92: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
       98: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 444 returned 100% blocks executed 100%
      444: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
      444: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 444
branch  1 taken 136 (fallthrough)
branch  2 taken 308
        -: 1300:    {
      136: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
      308: 1309:  if (toFlag == 1)
branch  0 taken 40 (fallthrough)
branch  1 taken 268
        -: 1310:    {
       40: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       40: 1312:      state->deckCount[player]++;
        -: 1313:    }
      268: 1314:  else if (toFlag == 2)
branch  0 taken 224 (fallthrough)
branch  1 taken 44
        -: 1315:    {
      224: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      224: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
       44: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       44: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
      308: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
      308: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 132192 returned 100% blocks executed 100%
   132192: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
   132192: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
 16930131: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 16797939
branch  1 taken 132192 (fallthrough)
        -: 1340:    {
 16797939: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 5753742 (fallthrough)
branch  1 taken 11044197
        -: 1342:	{
  5753742: 1343:	  state->coins += 1;
        -: 1344:	}
 11044197: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 5489000 (fallthrough)
branch  1 taken 5555197
        -: 1346:	{
  5489000: 1347:	  state->coins += 2;
        -: 1348:	}
  5555197: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 5489000 (fallthrough)
branch  1 taken 66197
        -: 1350:	{
  5489000: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
   132192: 1356:  state->coins += bonus;
        -: 1357:
   132192: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361://end of dominion.c
