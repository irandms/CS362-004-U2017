***** LAUNCHING UNIT TESTS *****
unittest1.c:
Tests for gainCard completed.
File 'dominion.c'
Lines executed:17.47% of 601
Branches executed:18.64% of 397
Taken at least once:15.37% of 397
Calls executed:8.89% of 90
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 5760 returned 100% blocks executed 83%
     5760:    8:int compare(const void* a, const void* b) {
     5760:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 5760
    #####:   10:    return 1;
     5760:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 1536 (fallthrough)
branch  1 taken 4224
     1536:   12:    return -1;
     4224:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 96 returned 100% blocks executed 89%
       96:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       96:   44:  SelectStream(1);
call    0 returned 96
       96:   45:  PutSeed((long)randomSeed);
call    0 returned 96
        -:   46:  
        -:   47:  //check number of players
       96:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 96 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 96
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       96:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1056:   57:  for (i = 0; i < 10; i++)
branch  0 taken 960
branch  1 taken 96 (fallthrough)
        -:   58:    {
    10560:   59:      for (j = 0; j < 10; j++)
branch  0 taken 9600
branch  1 taken 960 (fallthrough)
        -:   60:        {
     9600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 8640 (fallthrough)
branch  1 taken 960
branch  2 taken 0 (fallthrough)
branch  3 taken 8640
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       96:   73:  if (numPlayers == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 96
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
       96:   77:  else if (numPlayers == 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 96
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       96:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       96:   87:  if (numPlayers == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 96
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
       96:   95:      state->supplyCount[estate] = 12;
       96:   96:      state->supplyCount[duchy] = 12;
       96:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       96:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       96:  102:  state->supplyCount[silver] = 40;
       96:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     2016:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 1920
branch  1 taken 96 (fallthrough)
        -:  107:    {
    15840:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 14880
branch  1 taken 960 (fallthrough)
        -:  109:	{
    14880:  110:	  if (kingdomCards[j] == i)
branch  0 taken 960 (fallthrough)
branch  1 taken 13920
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      960:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 864 (fallthrough)
branch  1 taken 96
branch  2 taken 96 (fallthrough)
branch  3 taken 768
        -:  114:		{
      384:  115:		  if (numPlayers == 2){ 
branch  0 taken 0 (fallthrough)
branch  1 taken 192
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      192:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      768:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      960:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    13920:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      480:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 384
branch  1 taken 96 (fallthrough)
        -:  139:    {
      384:  140:      state->deckCount[i] = 0;
     1536:  141:      for (j = 0; j < 3; j++)
branch  0 taken 1152
branch  1 taken 384 (fallthrough)
        -:  142:	{
     1152:  143:	  state->deck[i][j] = estate;
     1152:  144:	  state->deckCount[i]++;
        -:  145:	}
     3072:  146:      for (j = 3; j < 10; j++)
branch  0 taken 2688
branch  1 taken 384 (fallthrough)
        -:  147:	{
     2688:  148:	  state->deck[i][j] = copper;
     2688:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      480:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 384
branch  1 taken 96 (fallthrough)
        -:  155:    {
      384:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 384
branch  1 taken 0 (fallthrough)
branch  2 taken 384
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      480:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 384
branch  1 taken 96 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      384:  166:      state->handCount[i] = 0;
      384:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     2688:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 2592
branch  1 taken 96 (fallthrough)
        -:  177:    {
     2592:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       96:  182:  state->outpostPlayed = 0;
       96:  183:  state->phase = 0;
       96:  184:  state->numActions = 1;
       96:  185:  state->numBuys = 1;
       96:  186:  state->playedCardCount = 0;
       96:  187:  state->whoseTurn = 0;
       96:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      576:  192:  for (it = 0; it < 5; it++){
branch  0 taken 480
branch  1 taken 96 (fallthrough)
      480:  193:    drawCard(state->whoseTurn, state);
call    0 returned 480
        -:  194:  }
        -:  195:
       96:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 96
        -:  197:
       96:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 384 returned 100% blocks executed 94%
      384:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      384:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      384:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 384
    #####:  210:    return -1;
      384:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 384
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     4608:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 3840
branch  1 taken 384 (fallthrough)
     3840:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 3840
     3840:  216:    newDeck[newDeckPos] = state->deck[player][card];
     3840:  217:    newDeckPos++;
    12576:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 8736
branch  1 taken 3840 (fallthrough)
     8736:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     3840:  221:    state->deckCount[player]--;
        -:  222:  }
     4224:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 3840
branch  1 taken 384 (fallthrough)
     3840:  224:    state->deck[player][i] = newDeck[i];
     3840:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      384:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 440 returned 100% blocks executed 100%
      440:  320:int supplyCount(int card, struct gameState *state) {
      440:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 480 returned 100% blocks executed 38%
      480:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      480:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 480
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      480:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      480:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      480:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      480:  576:    state->deckCount[player]--;
      480:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      480:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
    #####:  587:    case curse:
    #####:  588:      return 0;
    #####:  589:    case estate:
    #####:  590:      return 2;
    #####:  591:    case duchy:
    #####:  592:      return 5;
    #####:  593:    case province:
    #####:  594:      return 8;
    #####:  595:    case copper:
    #####:  596:      return 0;
    #####:  597:    case silver:
    #####:  598:      return 3;
    #####:  599:    case gold:
    #####:  600:      return 6;
    #####:  601:    case adventurer:
    #####:  602:      return 6;
    #####:  603:    case council_room:
    #####:  604:      return 5;
    #####:  605:    case feast:
    #####:  606:      return 4;
    #####:  607:    case gardens:
    #####:  608:      return 4;
    #####:  609:    case mine:
    #####:  610:      return 5;
    #####:  611:    case remodel:
    #####:  612:      return 4;
    #####:  613:    case smithy:
    #####:  614:      return 4;
    #####:  615:    case village:
    #####:  616:      return 3;
    #####:  617:    case baron:
    #####:  618:      return 4;
    #####:  619:    case great_hall:
    #####:  620:      return 3;
    #####:  621:    case minion:
    #####:  622:      return 5;
    #####:  623:    case steward:
    #####:  624:      return 3;
    #####:  625:    case tribute:
    #####:  626:      return 5;
    #####:  627:    case ambassador:
    #####:  628:      return 3;
    #####:  629:    case cutpurse:
    #####:  630:      return 4;
    #####:  631:    case embargo: 
    #####:  632:      return 2;
    #####:  633:    case outpost:
    #####:  634:      return 5;
    #####:  635:    case salvager:
    #####:  636:      return 4;
    #####:  637:    case sea_hag:
    #####:  638:      return 4;
    #####:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function playAdventurer called 0 returned 0% blocks executed 0%
    #####:  646:int playAdventurer(int drawntreasure, int currentPlayer, int cardDrawn, int *temphand, int z, struct gameState *state) {
    #####:  647:	while (drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  648:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  649:			shuffle(currentPlayer, state);
call    0 never executed
        -:  650:		}
    #####:  651:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  652:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  653:		if (cardDrawn == copper || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  654:			drawntreasure++;
        -:  655:		else {
    #####:  656:			temphand[z] = cardDrawn;
    #####:  657:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  658:			z++;
        -:  659:		}
        -:  660:	}
    #####:  661:	while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  662:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  663:		z = z - 1;
        -:  664:	}
    #####:  665:	return 0;
        -:  666:}
        -:  667:
function playSmithy called 0 returned 0% blocks executed 0%
    #####:  668:int playSmithy(int i, int currentPlayer, int handPos, struct gameState *state) {
        -:  669:	//+3 Cards
    #####:  670:	for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  671:	{
    #####:  672:		drawCard(currentPlayer, state);
call    0 never executed
        -:  673:	}
        -:  674:
        -:  675:	//discard card from hand
    #####:  676:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  677:	return 0;
        -:  678:}
        -:  679:
function playVillage called 0 returned 0% blocks executed 0%
    #####:  680:int playVillage(int currentPlayer, int handPos, struct gameState *state) {
        -:  681:	//+1 Card
    #####:  682:	drawCard(currentPlayer, state);
call    0 never executed
        -:  683:
        -:  684:	//+2 Actions
    #####:  685:	state->numActions = 2;
        -:  686:
        -:  687:	//discard played card from hand
    #####:  688:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  689:	return 0;
        -:  690:}
        -:  691:
function playMinion called 0 returned 0% blocks executed 0%
    #####:  692:int playMinion(int i, int j, int currentPlayer, int handPos, int choice1, int choice2, struct gameState *state) {
        -:  693:	//+1 action
    #####:  694:	state->numActions++;
        -:  695:
        -:  696:	//discard card from hand
    #####:  697:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:	if (1)		//+2 coins
        -:  700:	{
    #####:  701:		state->coins = state->coins + 2;
        -:  702:	}
        -:  703:
        -:  704:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  705:	{
        -:  706:		//discard hand
        -:  707:		while (numHandCards(state) > 0)
        -:  708:		{
        -:  709:			discardCard(handPos, currentPlayer, state, 0);
        -:  710:		}
        -:  711:
        -:  712:		//draw 4
        -:  713:		for (i = 0; i < 4; i++)
        -:  714:		{
        -:  715:			drawCard(currentPlayer, state);
        -:  716:		}
        -:  717:
        -:  718:		//other players discard hand and redraw if hand size > 4
        -:  719:		for (i = 0; i < state->numPlayers; i++)
        -:  720:		{
        -:  721:			if (i != currentPlayer)
        -:  722:			{
        -:  723:				if (state->handCount[i] > 4)
        -:  724:				{
        -:  725:					//discard hand
        -:  726:					while (state->handCount[i] > 0)
        -:  727:					{
        -:  728:						discardCard(handPos, i, state, 0);
        -:  729:					}
        -:  730:
        -:  731:					//draw 4
        -:  732:					for (j = 0; j < 4; j++)
        -:  733:					{
        -:  734:						drawCard(i, state);
        -:  735:					}
        -:  736:				}
        -:  737:			}
        -:  738:		}
        -:  739:
        -:  740:	}
    #####:  741:	return 0;
        -:  742:}
        -:  743:
function playCutpurse called 0 returned 0% blocks executed 0%
    #####:  744:int playCutpurse(int i, int j, int k, int currentPlayer, int handPos, struct gameState *state) {
    #####:  745:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  746:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  747:	{
    #####:  748:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  749:		{
    #####:  750:			for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  751:			{
    #####:  752:				if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  753:				{
    #####:  754:					discardCard(j, i, state, 0);
call    0 never executed
    #####:  755:					break;
        -:  756:				}
    #####:  757:				if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  758:				{
    #####:  759:					for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  760:					{
        -:  761:						if (DEBUG)
        -:  762:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  763:					}
    #####:  764:					break;
        -:  765:				}
        -:  766:			}
        -:  767:
        -:  768:		}
        -:  769:
        -:  770:	}
        -:  771:
        -:  772:	//discard played card from hand
    #####:  773:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  774:
    #####:  775:	return 0;
        -:  776:}
        -:  777:
        -:  778:
        -:  779:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  780:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  781:{
    #####:  782:  int i = 0;
    #####:  783:  int j = 0;
    #####:  784:  int k = 0;
        -:  785:  int x;
        -:  786:  int index;
    #####:  787:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  788:  int nextPlayer = currentPlayer + 1;
        -:  789:
    #####:  790:  int tributeRevealedCards[2] = {-1, -1};
        -:  791:  int temphand[MAX_HAND];// moved above the if statement
    #####:  792:  int drawntreasure=0;
    #####:  793:  int cardDrawn = 0;
    #####:  794:  int z = 0;// this is the counter for the temp hand
    #####:  795:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  796:    nextPlayer = 0;
        -:  797:  }
        -:  798:  
        -:  799:	
        -:  800:  //uses switch to select card and perform actions
    #####:  801:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  802:    {
    #####:  803:    case adventurer:
        -:  804:		//Custom function 1/5: Adventurer
    #####:  805:		playAdventurer(drawntreasure, currentPlayer, cardDrawn, temphand, z, state);
call    0 never executed
    #####:  806:		return 0;
        -:  807:			
    #####:  808:    case council_room:
        -:  809:      //+4 Cards
    #####:  810:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  811:	{
    #####:  812:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  813:	}
        -:  814:			
        -:  815:      //+1 Buy
    #####:  816:      state->numBuys++;
        -:  817:			
        -:  818:      //Each other player draws a card
    #####:  819:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  820:	{
    #####:  821:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  822:	    {
    #####:  823:	      drawCard(i, state);
call    0 never executed
        -:  824:	    }
        -:  825:	}
        -:  826:			
        -:  827:      //put played card in played card pile
    #####:  828:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  829:			
    #####:  830:      return 0;
        -:  831:			
    #####:  832:    case feast:
        -:  833:      //gain card with cost up to 5
        -:  834:      //Backup hand
    #####:  835:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  836:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  837:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  838:      }
        -:  839:      //Backup hand
        -:  840:
        -:  841:      //Update Coins for Buy
    #####:  842:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  843:      x = 1;//Condition to loop on
    #####:  844:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  845:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  846:	  if (DEBUG)
        -:  847:	    printf("None of that card left, sorry!\n");
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  851:	  }
        -:  852:	}
    #####:  853:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  854:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  858:	  }
        -:  859:	}
        -:  860:	else{
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
    #####:  866:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  867:	  x = 0;//No more buying cards
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
        -:  873:	}
        -:  874:      }     
        -:  875:
        -:  876:      //Reset Hand
    #####:  877:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  878:	state->hand[currentPlayer][i] = temphand[i];
    #####:  879:	temphand[i] = -1;
        -:  880:      }
        -:  881:      //Reset Hand
        -:  882:      			
    #####:  883:      return 0;
        -:  884:			
    #####:  885:    case gardens:
    #####:  886:      return -1;
        -:  887:			
    #####:  888:    case mine:
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:		
    #####:  896:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  897:	{
    #####:  898:	  return -1;
        -:  899:	}
        -:  900:
    #####:  901:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  902:	{
    #####:  903:	  return -1;
        -:  904:	}
        -:  905:
    #####:  906:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  907:
        -:  908:      //discard card from hand
    #####:  909:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  910:
        -:  911:      //discard trashed card
    #####:  912:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  913:	{
    #####:  914:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  915:	    {
    #####:  916:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  917:	      break;
        -:  918:	    }
        -:  919:	}
        -:  920:			
    #####:  921:      return 0;
        -:  922:			
    #####:  923:    case remodel:
    #####:  924:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  925:
    #####:  926:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  927:	{
    #####:  928:	  return -1;
        -:  929:	}
        -:  930:
    #####:  931:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  932:
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  935:
        -:  936:      //discard trashed card
    #####:  937:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  940:	    {
    #####:  941:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  942:	      break;
        -:  943:	    }
        -:  944:	}
        -:  945:
        -:  946:
    #####:  947:      return 0;
        -:  948:		
    #####:  949:    case smithy:
        -:  950:		//Custom function 2/5: Smithy
    #####:  951:		playSmithy(i, currentPlayer, handPos, state);
call    0 never executed
    #####:  952:		return 0;
        -:  953:		
    #####:  954:    case village:
        -:  955:		//Custom function 3/5: Village
    #####:  956:		playVillage(currentPlayer, handPos, state);
call    0 never executed
    #####:  957:		return 0;
        -:  958:		
    #####:  959:    case baron:
    #####:  960:      state->numBuys++;//Increase buys by 1!
    #####:  961:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  962:	int p = 0;//Iterator for hand!
    #####:  963:	int card_not_discarded = 1;//Flag for discard set!
    #####:  964:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  965:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  966:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  967:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  968:	    state->discardCount[currentPlayer]++;
    #####:  969:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  970:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  971:	    }
    #####:  972:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  973:	    state->handCount[currentPlayer]--;
    #####:  974:	    card_not_discarded = 0;//Exit the loop
        -:  975:	  }
    #####:  976:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  977:	    if(DEBUG) {
        -:  978:	      printf("No estate cards in your hand, invalid choice\n");
        -:  979:	      printf("Must gain an estate if there are any\n");
        -:  980:	    }
    #####:  981:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  982:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  983:	      state->supplyCount[estate]--;//Decrement estates
    #####:  984:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  985:		isGameOver(state);
call    0 never executed
        -:  986:	      }
        -:  987:	    }
    #####:  988:	    card_not_discarded = 0;//Exit the loop
        -:  989:	  }
        -:  990:			    
        -:  991:	  else{
    #####:  992:	    p++;//Next card
        -:  993:	  }
        -:  994:	}
        -:  995:      }
        -:  996:			    
        -:  997:      else{
    #####:  998:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  999:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1000:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1001:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:	    isGameOver(state);
call    0 never executed
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      
    #####: 1008:      return 0;
        -: 1009:		
    #####: 1010:    case great_hall:
        -: 1011:      //+1 Card
    #####: 1012:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1013:			
        -: 1014:      //+1 Actions
    #####: 1015:      state->numActions++;
        -: 1016:			
        -: 1017:      //discard card from hand
    #####: 1018:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1019:      return 0;
        -: 1020:		
    #####: 1021:    case minion:
        -: 1022:		//Custom function 4/5: Minion
    #####: 1023:		playMinion(i, j, currentPlayer, handPos, choice1, choice2, state);
call    0 never executed
    #####: 1024:		return 0;
        -: 1025:		
    #####: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
        -: 1029:	  //+2 cards
    #####: 1030:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1031:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1032:	}
    #####: 1033:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
        -: 1035:	  //+2 coins
    #####: 1036:	  state->coins = state->coins + 2;
        -: 1037:	}
        -: 1038:      else
        -: 1039:	{
        -: 1040:	  //trash 2 cards in hand
    #####: 1041:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1042:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1043:	}
        -: 1044:			
        -: 1045:      //discard card from hand
    #####: 1046:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1047:      return 0;
        -: 1048:		
    #####: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1051:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	  state->deckCount[nextPlayer]--;
        -: 1054:	}
    #####: 1055:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:	  state->discardCount[nextPlayer]--;
        -: 1058:	}
        -: 1059:	else{
        -: 1060:	  //No Card to Reveal
        -: 1061:	  if (DEBUG){
        -: 1062:	    printf("No cards to reveal\n");
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:	    
        -: 1067:      else{
    #####: 1068:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1070:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:	    state->deckCount[nextPlayer]++;
    #####: 1072:	    state->discard[nextPlayer][i] = -1;
    #####: 1073:	    state->discardCount[nextPlayer]--;
        -: 1074:	  }
        -: 1075:			    
    #####: 1076:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1077:	} 
    #####: 1078:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
    #####: 1081:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
        -: 1084:      }    
        -: 1085:		       
    #####: 1086:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1087:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:	state->playedCardCount++;
    #####: 1089:	tributeRevealedCards[1] = -1;
        -: 1090:      }
        -: 1091:
    #####: 1092:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1093:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        -: 1096:		    
    #####: 1097:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1098:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1099:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1100:	}
        -: 1101:	else{//Action Card
    #####: 1102:	  state->numActions = state->numActions + 2;
        -: 1103:	}
        -: 1104:      }
        -: 1105:	    
    #####: 1106:      return 0;
        -: 1107:		
    #####: 1108:    case ambassador:
    #####: 1109:      j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
    #####: 1116:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1124:	    {
    #####: 1125:	      j++;
        -: 1126:	    }
        -: 1127:	}
    #####: 1128:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;				
        -: 1131:	}
        -: 1132:
        -: 1133:      if (DEBUG) 
        -: 1134:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:      //increase supply count for choosen card by amount being discarded
    #####: 1137:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:			
        -: 1139:      //each other player gains a copy of revealed card
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1145:	    }
        -: 1146:	}
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1150:
        -: 1151:      //trash copies of cards returned to supply
    #####: 1152:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
    #####: 1154:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1157:		{
    #####: 1158:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:		  break;
        -: 1160:		}
        -: 1161:	    }
        -: 1162:	}			
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:		
    #####: 1166:    case cutpurse:
        -: 1167:		//Custom function 5/5: Cutpurse
    #####: 1168:		playCutpurse(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1169:		return 0;
        -: 1170:
    #####: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
    #####: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
    #####: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
    #####: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
    #####: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 0 returned 0% blocks executed 0%
    #####: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
    #####: 1260:  if (trashFlag < 1)
branch  0 never executed
branch  1 never executed
        -: 1261:    {
        -: 1262:      //add card to played pile
    #####: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    #####: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
    #####: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
    #####: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 never executed
branch  1 never executed
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
    #####: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
    #####: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 never executed
branch  1 never executed
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
    #####: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
    #####: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
    #####: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
    #####: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 440 returned 100% blocks executed 100%
      440: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
      440: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 440
branch  1 taken 136 (fallthrough)
branch  2 taken 304
        -: 1300:    {
      136: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
      304: 1309:  if (toFlag == 1)
branch  0 taken 40 (fallthrough)
branch  1 taken 264
        -: 1310:    {
       40: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       40: 1312:      state->deckCount[player]++;
        -: 1313:    }
      264: 1314:  else if (toFlag == 2)
branch  0 taken 224 (fallthrough)
branch  1 taken 40
        -: 1315:    {
      224: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      224: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
       40: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       40: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
      304: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
      304: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 96 returned 100% blocks executed 82%
       96: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
       96: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
      576: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 480
branch  1 taken 96 (fallthrough)
        -: 1340:    {
      480: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 384 (fallthrough)
branch  1 taken 96
        -: 1342:	{
      384: 1343:	  state->coins += 1;
        -: 1344:	}
       96: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 96
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
       96: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 96
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
       96: 1356:  state->coins += bonus;
        -: 1357:
       96: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361://end of dominion.c
unittest2.c:
Tests for discardCard completed.
File 'dominion.c'
Lines executed:19.47% of 601
Branches executed:20.15% of 397
Taken at least once:16.62% of 397
Calls executed:8.89% of 90
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:2
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 8640 returned 100% blocks executed 83%
     8640:    8:int compare(const void* a, const void* b) {
     8640:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 8640
    #####:   10:    return 1;
     8640:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 2304 (fallthrough)
branch  1 taken 6336
     2304:   12:    return -1;
     6336:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 144 returned 100% blocks executed 89%
      144:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      144:   44:  SelectStream(1);
call    0 returned 144
      144:   45:  PutSeed((long)randomSeed);
call    0 returned 144
        -:   46:  
        -:   47:  //check number of players
      144:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 144 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 144
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      144:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     1584:   57:  for (i = 0; i < 10; i++)
branch  0 taken 1440
branch  1 taken 144 (fallthrough)
        -:   58:    {
    15840:   59:      for (j = 0; j < 10; j++)
branch  0 taken 14400
branch  1 taken 1440 (fallthrough)
        -:   60:        {
    14400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 12960 (fallthrough)
branch  1 taken 1440
branch  2 taken 0 (fallthrough)
branch  3 taken 12960
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      144:   73:  if (numPlayers == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 144
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      144:   77:  else if (numPlayers == 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 144
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
      144:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      144:   87:  if (numPlayers == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 144
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      144:   95:      state->supplyCount[estate] = 12;
      144:   96:      state->supplyCount[duchy] = 12;
      144:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      144:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      144:  102:  state->supplyCount[silver] = 40;
      144:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     3024:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 2880
branch  1 taken 144 (fallthrough)
        -:  107:    {
    23760:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 22320
branch  1 taken 1440 (fallthrough)
        -:  109:	{
    22320:  110:	  if (kingdomCards[j] == i)
branch  0 taken 1440 (fallthrough)
branch  1 taken 20880
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     1440:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 1296 (fallthrough)
branch  1 taken 144
branch  2 taken 144 (fallthrough)
branch  3 taken 1152
        -:  114:		{
      576:  115:		  if (numPlayers == 2){ 
branch  0 taken 0 (fallthrough)
branch  1 taken 288
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      288:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     1152:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     1440:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    20880:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
      720:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 576
branch  1 taken 144 (fallthrough)
        -:  139:    {
      576:  140:      state->deckCount[i] = 0;
     2304:  141:      for (j = 0; j < 3; j++)
branch  0 taken 1728
branch  1 taken 576 (fallthrough)
        -:  142:	{
     1728:  143:	  state->deck[i][j] = estate;
     1728:  144:	  state->deckCount[i]++;
        -:  145:	}
     4608:  146:      for (j = 3; j < 10; j++)
branch  0 taken 4032
branch  1 taken 576 (fallthrough)
        -:  147:	{
     4032:  148:	  state->deck[i][j] = copper;
     4032:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
      720:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 576
branch  1 taken 144 (fallthrough)
        -:  155:    {
      576:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 576
branch  1 taken 0 (fallthrough)
branch  2 taken 576
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
      720:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 576
branch  1 taken 144 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      576:  166:      state->handCount[i] = 0;
      576:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     4032:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 3888
branch  1 taken 144 (fallthrough)
        -:  177:    {
     3888:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      144:  182:  state->outpostPlayed = 0;
      144:  183:  state->phase = 0;
      144:  184:  state->numActions = 1;
      144:  185:  state->numBuys = 1;
      144:  186:  state->playedCardCount = 0;
      144:  187:  state->whoseTurn = 0;
      144:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
      864:  192:  for (it = 0; it < 5; it++){
branch  0 taken 720
branch  1 taken 144 (fallthrough)
      720:  193:    drawCard(state->whoseTurn, state);
call    0 returned 720
        -:  194:  }
        -:  195:
      144:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 144
        -:  197:
      144:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 576 returned 100% blocks executed 94%
      576:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      576:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      576:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 576
    #####:  210:    return -1;
      576:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 576
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
     6912:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 5760
branch  1 taken 576 (fallthrough)
     5760:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 5760
     5760:  216:    newDeck[newDeckPos] = state->deck[player][card];
     5760:  217:    newDeckPos++;
    18864:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 13104
branch  1 taken 5760 (fallthrough)
    13104:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     5760:  221:    state->deckCount[player]--;
        -:  222:  }
     6336:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 5760
branch  1 taken 576 (fallthrough)
     5760:  224:    state->deck[player][i] = newDeck[i];
     5760:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      576:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 440 returned 100% blocks executed 100%
      440:  320:int supplyCount(int card, struct gameState *state) {
      440:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 720 returned 100% blocks executed 38%
      720:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      720:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 720
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      720:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      720:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      720:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      720:  576:    state->deckCount[player]--;
      720:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      720:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
    #####:  587:    case curse:
    #####:  588:      return 0;
    #####:  589:    case estate:
    #####:  590:      return 2;
    #####:  591:    case duchy:
    #####:  592:      return 5;
    #####:  593:    case province:
    #####:  594:      return 8;
    #####:  595:    case copper:
    #####:  596:      return 0;
    #####:  597:    case silver:
    #####:  598:      return 3;
    #####:  599:    case gold:
    #####:  600:      return 6;
    #####:  601:    case adventurer:
    #####:  602:      return 6;
    #####:  603:    case council_room:
    #####:  604:      return 5;
    #####:  605:    case feast:
    #####:  606:      return 4;
    #####:  607:    case gardens:
    #####:  608:      return 4;
    #####:  609:    case mine:
    #####:  610:      return 5;
    #####:  611:    case remodel:
    #####:  612:      return 4;
    #####:  613:    case smithy:
    #####:  614:      return 4;
    #####:  615:    case village:
    #####:  616:      return 3;
    #####:  617:    case baron:
    #####:  618:      return 4;
    #####:  619:    case great_hall:
    #####:  620:      return 3;
    #####:  621:    case minion:
    #####:  622:      return 5;
    #####:  623:    case steward:
    #####:  624:      return 3;
    #####:  625:    case tribute:
    #####:  626:      return 5;
    #####:  627:    case ambassador:
    #####:  628:      return 3;
    #####:  629:    case cutpurse:
    #####:  630:      return 4;
    #####:  631:    case embargo: 
    #####:  632:      return 2;
    #####:  633:    case outpost:
    #####:  634:      return 5;
    #####:  635:    case salvager:
    #####:  636:      return 4;
    #####:  637:    case sea_hag:
    #####:  638:      return 4;
    #####:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function playAdventurer called 0 returned 0% blocks executed 0%
    #####:  646:int playAdventurer(int drawntreasure, int currentPlayer, int cardDrawn, int *temphand, int z, struct gameState *state) {
    #####:  647:	while (drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  648:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  649:			shuffle(currentPlayer, state);
call    0 never executed
        -:  650:		}
    #####:  651:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  652:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  653:		if (cardDrawn == copper || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  654:			drawntreasure++;
        -:  655:		else {
    #####:  656:			temphand[z] = cardDrawn;
    #####:  657:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  658:			z++;
        -:  659:		}
        -:  660:	}
    #####:  661:	while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  662:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  663:		z = z - 1;
        -:  664:	}
    #####:  665:	return 0;
        -:  666:}
        -:  667:
function playSmithy called 0 returned 0% blocks executed 0%
    #####:  668:int playSmithy(int i, int currentPlayer, int handPos, struct gameState *state) {
        -:  669:	//+3 Cards
    #####:  670:	for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  671:	{
    #####:  672:		drawCard(currentPlayer, state);
call    0 never executed
        -:  673:	}
        -:  674:
        -:  675:	//discard card from hand
    #####:  676:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  677:	return 0;
        -:  678:}
        -:  679:
function playVillage called 0 returned 0% blocks executed 0%
    #####:  680:int playVillage(int currentPlayer, int handPos, struct gameState *state) {
        -:  681:	//+1 Card
    #####:  682:	drawCard(currentPlayer, state);
call    0 never executed
        -:  683:
        -:  684:	//+2 Actions
    #####:  685:	state->numActions = 2;
        -:  686:
        -:  687:	//discard played card from hand
    #####:  688:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  689:	return 0;
        -:  690:}
        -:  691:
function playMinion called 0 returned 0% blocks executed 0%
    #####:  692:int playMinion(int i, int j, int currentPlayer, int handPos, int choice1, int choice2, struct gameState *state) {
        -:  693:	//+1 action
    #####:  694:	state->numActions++;
        -:  695:
        -:  696:	//discard card from hand
    #####:  697:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:	if (1)		//+2 coins
        -:  700:	{
    #####:  701:		state->coins = state->coins + 2;
        -:  702:	}
        -:  703:
        -:  704:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  705:	{
        -:  706:		//discard hand
        -:  707:		while (numHandCards(state) > 0)
        -:  708:		{
        -:  709:			discardCard(handPos, currentPlayer, state, 0);
        -:  710:		}
        -:  711:
        -:  712:		//draw 4
        -:  713:		for (i = 0; i < 4; i++)
        -:  714:		{
        -:  715:			drawCard(currentPlayer, state);
        -:  716:		}
        -:  717:
        -:  718:		//other players discard hand and redraw if hand size > 4
        -:  719:		for (i = 0; i < state->numPlayers; i++)
        -:  720:		{
        -:  721:			if (i != currentPlayer)
        -:  722:			{
        -:  723:				if (state->handCount[i] > 4)
        -:  724:				{
        -:  725:					//discard hand
        -:  726:					while (state->handCount[i] > 0)
        -:  727:					{
        -:  728:						discardCard(handPos, i, state, 0);
        -:  729:					}
        -:  730:
        -:  731:					//draw 4
        -:  732:					for (j = 0; j < 4; j++)
        -:  733:					{
        -:  734:						drawCard(i, state);
        -:  735:					}
        -:  736:				}
        -:  737:			}
        -:  738:		}
        -:  739:
        -:  740:	}
    #####:  741:	return 0;
        -:  742:}
        -:  743:
function playCutpurse called 0 returned 0% blocks executed 0%
    #####:  744:int playCutpurse(int i, int j, int k, int currentPlayer, int handPos, struct gameState *state) {
    #####:  745:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  746:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  747:	{
    #####:  748:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  749:		{
    #####:  750:			for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  751:			{
    #####:  752:				if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  753:				{
    #####:  754:					discardCard(j, i, state, 0);
call    0 never executed
    #####:  755:					break;
        -:  756:				}
    #####:  757:				if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  758:				{
    #####:  759:					for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  760:					{
        -:  761:						if (DEBUG)
        -:  762:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  763:					}
    #####:  764:					break;
        -:  765:				}
        -:  766:			}
        -:  767:
        -:  768:		}
        -:  769:
        -:  770:	}
        -:  771:
        -:  772:	//discard played card from hand
    #####:  773:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  774:
    #####:  775:	return 0;
        -:  776:}
        -:  777:
        -:  778:
        -:  779:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  780:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  781:{
    #####:  782:  int i = 0;
    #####:  783:  int j = 0;
    #####:  784:  int k = 0;
        -:  785:  int x;
        -:  786:  int index;
    #####:  787:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  788:  int nextPlayer = currentPlayer + 1;
        -:  789:
    #####:  790:  int tributeRevealedCards[2] = {-1, -1};
        -:  791:  int temphand[MAX_HAND];// moved above the if statement
    #####:  792:  int drawntreasure=0;
    #####:  793:  int cardDrawn = 0;
    #####:  794:  int z = 0;// this is the counter for the temp hand
    #####:  795:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  796:    nextPlayer = 0;
        -:  797:  }
        -:  798:  
        -:  799:	
        -:  800:  //uses switch to select card and perform actions
    #####:  801:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  802:    {
    #####:  803:    case adventurer:
        -:  804:		//Custom function 1/5: Adventurer
    #####:  805:		playAdventurer(drawntreasure, currentPlayer, cardDrawn, temphand, z, state);
call    0 never executed
    #####:  806:		return 0;
        -:  807:			
    #####:  808:    case council_room:
        -:  809:      //+4 Cards
    #####:  810:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  811:	{
    #####:  812:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  813:	}
        -:  814:			
        -:  815:      //+1 Buy
    #####:  816:      state->numBuys++;
        -:  817:			
        -:  818:      //Each other player draws a card
    #####:  819:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  820:	{
    #####:  821:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  822:	    {
    #####:  823:	      drawCard(i, state);
call    0 never executed
        -:  824:	    }
        -:  825:	}
        -:  826:			
        -:  827:      //put played card in played card pile
    #####:  828:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  829:			
    #####:  830:      return 0;
        -:  831:			
    #####:  832:    case feast:
        -:  833:      //gain card with cost up to 5
        -:  834:      //Backup hand
    #####:  835:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  836:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  837:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  838:      }
        -:  839:      //Backup hand
        -:  840:
        -:  841:      //Update Coins for Buy
    #####:  842:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  843:      x = 1;//Condition to loop on
    #####:  844:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  845:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  846:	  if (DEBUG)
        -:  847:	    printf("None of that card left, sorry!\n");
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  851:	  }
        -:  852:	}
    #####:  853:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  854:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  858:	  }
        -:  859:	}
        -:  860:	else{
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
    #####:  866:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  867:	  x = 0;//No more buying cards
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
        -:  873:	}
        -:  874:      }     
        -:  875:
        -:  876:      //Reset Hand
    #####:  877:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  878:	state->hand[currentPlayer][i] = temphand[i];
    #####:  879:	temphand[i] = -1;
        -:  880:      }
        -:  881:      //Reset Hand
        -:  882:      			
    #####:  883:      return 0;
        -:  884:			
    #####:  885:    case gardens:
    #####:  886:      return -1;
        -:  887:			
    #####:  888:    case mine:
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:		
    #####:  896:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  897:	{
    #####:  898:	  return -1;
        -:  899:	}
        -:  900:
    #####:  901:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  902:	{
    #####:  903:	  return -1;
        -:  904:	}
        -:  905:
    #####:  906:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  907:
        -:  908:      //discard card from hand
    #####:  909:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  910:
        -:  911:      //discard trashed card
    #####:  912:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  913:	{
    #####:  914:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  915:	    {
    #####:  916:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  917:	      break;
        -:  918:	    }
        -:  919:	}
        -:  920:			
    #####:  921:      return 0;
        -:  922:			
    #####:  923:    case remodel:
    #####:  924:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  925:
    #####:  926:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  927:	{
    #####:  928:	  return -1;
        -:  929:	}
        -:  930:
    #####:  931:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  932:
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  935:
        -:  936:      //discard trashed card
    #####:  937:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  940:	    {
    #####:  941:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  942:	      break;
        -:  943:	    }
        -:  944:	}
        -:  945:
        -:  946:
    #####:  947:      return 0;
        -:  948:		
    #####:  949:    case smithy:
        -:  950:		//Custom function 2/5: Smithy
    #####:  951:		playSmithy(i, currentPlayer, handPos, state);
call    0 never executed
    #####:  952:		return 0;
        -:  953:		
    #####:  954:    case village:
        -:  955:		//Custom function 3/5: Village
    #####:  956:		playVillage(currentPlayer, handPos, state);
call    0 never executed
    #####:  957:		return 0;
        -:  958:		
    #####:  959:    case baron:
    #####:  960:      state->numBuys++;//Increase buys by 1!
    #####:  961:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  962:	int p = 0;//Iterator for hand!
    #####:  963:	int card_not_discarded = 1;//Flag for discard set!
    #####:  964:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  965:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  966:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  967:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  968:	    state->discardCount[currentPlayer]++;
    #####:  969:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  970:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  971:	    }
    #####:  972:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  973:	    state->handCount[currentPlayer]--;
    #####:  974:	    card_not_discarded = 0;//Exit the loop
        -:  975:	  }
    #####:  976:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  977:	    if(DEBUG) {
        -:  978:	      printf("No estate cards in your hand, invalid choice\n");
        -:  979:	      printf("Must gain an estate if there are any\n");
        -:  980:	    }
    #####:  981:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  982:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  983:	      state->supplyCount[estate]--;//Decrement estates
    #####:  984:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  985:		isGameOver(state);
call    0 never executed
        -:  986:	      }
        -:  987:	    }
    #####:  988:	    card_not_discarded = 0;//Exit the loop
        -:  989:	  }
        -:  990:			    
        -:  991:	  else{
    #####:  992:	    p++;//Next card
        -:  993:	  }
        -:  994:	}
        -:  995:      }
        -:  996:			    
        -:  997:      else{
    #####:  998:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  999:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1000:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1001:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:	    isGameOver(state);
call    0 never executed
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      
    #####: 1008:      return 0;
        -: 1009:		
    #####: 1010:    case great_hall:
        -: 1011:      //+1 Card
    #####: 1012:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1013:			
        -: 1014:      //+1 Actions
    #####: 1015:      state->numActions++;
        -: 1016:			
        -: 1017:      //discard card from hand
    #####: 1018:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1019:      return 0;
        -: 1020:		
    #####: 1021:    case minion:
        -: 1022:		//Custom function 4/5: Minion
    #####: 1023:		playMinion(i, j, currentPlayer, handPos, choice1, choice2, state);
call    0 never executed
    #####: 1024:		return 0;
        -: 1025:		
    #####: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
        -: 1029:	  //+2 cards
    #####: 1030:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1031:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1032:	}
    #####: 1033:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
        -: 1035:	  //+2 coins
    #####: 1036:	  state->coins = state->coins + 2;
        -: 1037:	}
        -: 1038:      else
        -: 1039:	{
        -: 1040:	  //trash 2 cards in hand
    #####: 1041:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1042:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1043:	}
        -: 1044:			
        -: 1045:      //discard card from hand
    #####: 1046:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1047:      return 0;
        -: 1048:		
    #####: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1051:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	  state->deckCount[nextPlayer]--;
        -: 1054:	}
    #####: 1055:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:	  state->discardCount[nextPlayer]--;
        -: 1058:	}
        -: 1059:	else{
        -: 1060:	  //No Card to Reveal
        -: 1061:	  if (DEBUG){
        -: 1062:	    printf("No cards to reveal\n");
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:	    
        -: 1067:      else{
    #####: 1068:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1070:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:	    state->deckCount[nextPlayer]++;
    #####: 1072:	    state->discard[nextPlayer][i] = -1;
    #####: 1073:	    state->discardCount[nextPlayer]--;
        -: 1074:	  }
        -: 1075:			    
    #####: 1076:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1077:	} 
    #####: 1078:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
    #####: 1081:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
        -: 1084:      }    
        -: 1085:		       
    #####: 1086:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1087:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:	state->playedCardCount++;
    #####: 1089:	tributeRevealedCards[1] = -1;
        -: 1090:      }
        -: 1091:
    #####: 1092:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1093:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        -: 1096:		    
    #####: 1097:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1098:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1099:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1100:	}
        -: 1101:	else{//Action Card
    #####: 1102:	  state->numActions = state->numActions + 2;
        -: 1103:	}
        -: 1104:      }
        -: 1105:	    
    #####: 1106:      return 0;
        -: 1107:		
    #####: 1108:    case ambassador:
    #####: 1109:      j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
    #####: 1116:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1124:	    {
    #####: 1125:	      j++;
        -: 1126:	    }
        -: 1127:	}
    #####: 1128:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;				
        -: 1131:	}
        -: 1132:
        -: 1133:      if (DEBUG) 
        -: 1134:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:      //increase supply count for choosen card by amount being discarded
    #####: 1137:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:			
        -: 1139:      //each other player gains a copy of revealed card
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1145:	    }
        -: 1146:	}
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1150:
        -: 1151:      //trash copies of cards returned to supply
    #####: 1152:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
    #####: 1154:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1157:		{
    #####: 1158:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:		  break;
        -: 1160:		}
        -: 1161:	    }
        -: 1162:	}			
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:		
    #####: 1166:    case cutpurse:
        -: 1167:		//Custom function 5/5: Cutpurse
    #####: 1168:		playCutpurse(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1169:		return 0;
        -: 1170:
    #####: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
    #####: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
    #####: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
    #####: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
    #####: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 80 returned 100% blocks executed 89%
       80: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       80: 1260:  if (trashFlag < 1)
branch  0 taken 40 (fallthrough)
branch  1 taken 40
        -: 1261:    {
        -: 1262:      //add card to played pile
       40: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       40: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       80: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       80: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 4 (fallthrough)
branch  1 taken 76
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
        4: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
       76: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 76
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       76: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       76: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       76: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
       80: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 440 returned 100% blocks executed 100%
      440: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
      440: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 440
branch  1 taken 136 (fallthrough)
branch  2 taken 304
        -: 1300:    {
      136: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
      304: 1309:  if (toFlag == 1)
branch  0 taken 40 (fallthrough)
branch  1 taken 264
        -: 1310:    {
       40: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       40: 1312:      state->deckCount[player]++;
        -: 1313:    }
      264: 1314:  else if (toFlag == 2)
branch  0 taken 224 (fallthrough)
branch  1 taken 40
        -: 1315:    {
      224: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      224: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
       40: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       40: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
      304: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
      304: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 144 returned 100% blocks executed 82%
      144: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
      144: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
      864: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 720
branch  1 taken 144 (fallthrough)
        -: 1340:    {
      720: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 576 (fallthrough)
branch  1 taken 144
        -: 1342:	{
      576: 1343:	  state->coins += 1;
        -: 1344:	}
      144: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 0 (fallthrough)
branch  1 taken 144
        -: 1346:	{
    #####: 1347:	  state->coins += 2;
        -: 1348:	}
      144: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 0 (fallthrough)
branch  1 taken 144
        -: 1350:	{
    #####: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
      144: 1356:  state->coins += bonus;
        -: 1357:
      144: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361://end of dominion.c
unittest3.c:
Tests for updateCoins completed.
File 'dominion.c'
Lines executed:19.80% of 601
Branches executed:20.15% of 397
Taken at least once:17.13% of 397
Calls executed:8.89% of 90
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:3
        -:    0:Programs:3
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3968640 returned 100% blocks executed 83%
  3968640:    8:int compare(const void* a, const void* b) {
  3968640:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 3968640
    #####:   10:    return 1;
  3968640:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 1058304 (fallthrough)
branch  1 taken 2910336
  1058304:   12:    return -1;
  2910336:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 66144 returned 100% blocks executed 89%
    66144:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    66144:   44:  SelectStream(1);
call    0 returned 66144
    66144:   45:  PutSeed((long)randomSeed);
call    0 returned 66144
        -:   46:  
        -:   47:  //check number of players
    66144:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 66144 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 66144
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    66144:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   727584:   57:  for (i = 0; i < 10; i++)
branch  0 taken 661440
branch  1 taken 66144 (fallthrough)
        -:   58:    {
  7275840:   59:      for (j = 0; j < 10; j++)
branch  0 taken 6614400
branch  1 taken 661440 (fallthrough)
        -:   60:        {
  6614400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 5952960 (fallthrough)
branch  1 taken 661440
branch  2 taken 0 (fallthrough)
branch  3 taken 5952960
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    66144:   73:  if (numPlayers == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 66144
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    66144:   77:  else if (numPlayers == 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 66144
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    66144:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    66144:   87:  if (numPlayers == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 66144
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    66144:   95:      state->supplyCount[estate] = 12;
    66144:   96:      state->supplyCount[duchy] = 12;
    66144:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    66144:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    66144:  102:  state->supplyCount[silver] = 40;
    66144:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  1389024:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 1322880
branch  1 taken 66144 (fallthrough)
        -:  107:    {
 10913760:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 10252320
branch  1 taken 661440 (fallthrough)
        -:  109:	{
 10252320:  110:	  if (kingdomCards[j] == i)
branch  0 taken 661440 (fallthrough)
branch  1 taken 9590880
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   661440:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 595296 (fallthrough)
branch  1 taken 66144
branch  2 taken 66144 (fallthrough)
branch  3 taken 529152
        -:  114:		{
   264576:  115:		  if (numPlayers == 2){ 
branch  0 taken 0 (fallthrough)
branch  1 taken 132288
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
   132288:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   529152:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   661440:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  9590880:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   330720:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264576
branch  1 taken 66144 (fallthrough)
        -:  139:    {
   264576:  140:      state->deckCount[i] = 0;
  1058304:  141:      for (j = 0; j < 3; j++)
branch  0 taken 793728
branch  1 taken 264576 (fallthrough)
        -:  142:	{
   793728:  143:	  state->deck[i][j] = estate;
   793728:  144:	  state->deckCount[i]++;
        -:  145:	}
  2116608:  146:      for (j = 3; j < 10; j++)
branch  0 taken 1852032
branch  1 taken 264576 (fallthrough)
        -:  147:	{
  1852032:  148:	  state->deck[i][j] = copper;
  1852032:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   330720:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264576
branch  1 taken 66144 (fallthrough)
        -:  155:    {
   264576:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 264576
branch  1 taken 0 (fallthrough)
branch  2 taken 264576
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   330720:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264576
branch  1 taken 66144 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   264576:  166:      state->handCount[i] = 0;
   264576:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  1852032:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 1785888
branch  1 taken 66144 (fallthrough)
        -:  177:    {
  1785888:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    66144:  182:  state->outpostPlayed = 0;
    66144:  183:  state->phase = 0;
    66144:  184:  state->numActions = 1;
    66144:  185:  state->numBuys = 1;
    66144:  186:  state->playedCardCount = 0;
    66144:  187:  state->whoseTurn = 0;
    66144:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   396864:  192:  for (it = 0; it < 5; it++){
branch  0 taken 330720
branch  1 taken 66144 (fallthrough)
   330720:  193:    drawCard(state->whoseTurn, state);
call    0 returned 330720
        -:  194:  }
        -:  195:
    66144:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 66144
        -:  197:
    66144:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 264576 returned 100% blocks executed 94%
   264576:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   264576:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   264576:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0 (fallthrough)
branch  1 taken 264576
    #####:  210:    return -1;
   264576:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 264576
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  3174912:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 2645760
branch  1 taken 264576 (fallthrough)
  2645760:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 2645760
  2645760:  216:    newDeck[newDeckPos] = state->deck[player][card];
  2645760:  217:    newDeckPos++;
  8664864:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 6019104
branch  1 taken 2645760 (fallthrough)
  6019104:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  2645760:  221:    state->deckCount[player]--;
        -:  222:  }
  2910336:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 2645760
branch  1 taken 264576 (fallthrough)
  2645760:  224:    state->deck[player][i] = newDeck[i];
  2645760:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   264576:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 440 returned 100% blocks executed 100%
      440:  320:int supplyCount(int card, struct gameState *state) {
      440:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 330720 returned 100% blocks executed 38%
   330720:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   330720:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0 (fallthrough)
branch  1 taken 330720
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   330720:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   330720:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   330720:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   330720:  576:    state->deckCount[player]--;
   330720:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   330720:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
    #####:  587:    case curse:
    #####:  588:      return 0;
    #####:  589:    case estate:
    #####:  590:      return 2;
    #####:  591:    case duchy:
    #####:  592:      return 5;
    #####:  593:    case province:
    #####:  594:      return 8;
    #####:  595:    case copper:
    #####:  596:      return 0;
    #####:  597:    case silver:
    #####:  598:      return 3;
    #####:  599:    case gold:
    #####:  600:      return 6;
    #####:  601:    case adventurer:
    #####:  602:      return 6;
    #####:  603:    case council_room:
    #####:  604:      return 5;
    #####:  605:    case feast:
    #####:  606:      return 4;
    #####:  607:    case gardens:
    #####:  608:      return 4;
    #####:  609:    case mine:
    #####:  610:      return 5;
    #####:  611:    case remodel:
    #####:  612:      return 4;
    #####:  613:    case smithy:
    #####:  614:      return 4;
    #####:  615:    case village:
    #####:  616:      return 3;
    #####:  617:    case baron:
    #####:  618:      return 4;
    #####:  619:    case great_hall:
    #####:  620:      return 3;
    #####:  621:    case minion:
    #####:  622:      return 5;
    #####:  623:    case steward:
    #####:  624:      return 3;
    #####:  625:    case tribute:
    #####:  626:      return 5;
    #####:  627:    case ambassador:
    #####:  628:      return 3;
    #####:  629:    case cutpurse:
    #####:  630:      return 4;
    #####:  631:    case embargo: 
    #####:  632:      return 2;
    #####:  633:    case outpost:
    #####:  634:      return 5;
    #####:  635:    case salvager:
    #####:  636:      return 4;
    #####:  637:    case sea_hag:
    #####:  638:      return 4;
    #####:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function playAdventurer called 0 returned 0% blocks executed 0%
    #####:  646:int playAdventurer(int drawntreasure, int currentPlayer, int cardDrawn, int *temphand, int z, struct gameState *state) {
    #####:  647:	while (drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  648:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  649:			shuffle(currentPlayer, state);
call    0 never executed
        -:  650:		}
    #####:  651:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  652:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  653:		if (cardDrawn == copper || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  654:			drawntreasure++;
        -:  655:		else {
    #####:  656:			temphand[z] = cardDrawn;
    #####:  657:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  658:			z++;
        -:  659:		}
        -:  660:	}
    #####:  661:	while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  662:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  663:		z = z - 1;
        -:  664:	}
    #####:  665:	return 0;
        -:  666:}
        -:  667:
function playSmithy called 0 returned 0% blocks executed 0%
    #####:  668:int playSmithy(int i, int currentPlayer, int handPos, struct gameState *state) {
        -:  669:	//+3 Cards
    #####:  670:	for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  671:	{
    #####:  672:		drawCard(currentPlayer, state);
call    0 never executed
        -:  673:	}
        -:  674:
        -:  675:	//discard card from hand
    #####:  676:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  677:	return 0;
        -:  678:}
        -:  679:
function playVillage called 0 returned 0% blocks executed 0%
    #####:  680:int playVillage(int currentPlayer, int handPos, struct gameState *state) {
        -:  681:	//+1 Card
    #####:  682:	drawCard(currentPlayer, state);
call    0 never executed
        -:  683:
        -:  684:	//+2 Actions
    #####:  685:	state->numActions = 2;
        -:  686:
        -:  687:	//discard played card from hand
    #####:  688:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  689:	return 0;
        -:  690:}
        -:  691:
function playMinion called 0 returned 0% blocks executed 0%
    #####:  692:int playMinion(int i, int j, int currentPlayer, int handPos, int choice1, int choice2, struct gameState *state) {
        -:  693:	//+1 action
    #####:  694:	state->numActions++;
        -:  695:
        -:  696:	//discard card from hand
    #####:  697:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:	if (1)		//+2 coins
        -:  700:	{
    #####:  701:		state->coins = state->coins + 2;
        -:  702:	}
        -:  703:
        -:  704:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  705:	{
        -:  706:		//discard hand
        -:  707:		while (numHandCards(state) > 0)
        -:  708:		{
        -:  709:			discardCard(handPos, currentPlayer, state, 0);
        -:  710:		}
        -:  711:
        -:  712:		//draw 4
        -:  713:		for (i = 0; i < 4; i++)
        -:  714:		{
        -:  715:			drawCard(currentPlayer, state);
        -:  716:		}
        -:  717:
        -:  718:		//other players discard hand and redraw if hand size > 4
        -:  719:		for (i = 0; i < state->numPlayers; i++)
        -:  720:		{
        -:  721:			if (i != currentPlayer)
        -:  722:			{
        -:  723:				if (state->handCount[i] > 4)
        -:  724:				{
        -:  725:					//discard hand
        -:  726:					while (state->handCount[i] > 0)
        -:  727:					{
        -:  728:						discardCard(handPos, i, state, 0);
        -:  729:					}
        -:  730:
        -:  731:					//draw 4
        -:  732:					for (j = 0; j < 4; j++)
        -:  733:					{
        -:  734:						drawCard(i, state);
        -:  735:					}
        -:  736:				}
        -:  737:			}
        -:  738:		}
        -:  739:
        -:  740:	}
    #####:  741:	return 0;
        -:  742:}
        -:  743:
function playCutpurse called 0 returned 0% blocks executed 0%
    #####:  744:int playCutpurse(int i, int j, int k, int currentPlayer, int handPos, struct gameState *state) {
    #####:  745:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  746:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  747:	{
    #####:  748:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  749:		{
    #####:  750:			for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  751:			{
    #####:  752:				if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  753:				{
    #####:  754:					discardCard(j, i, state, 0);
call    0 never executed
    #####:  755:					break;
        -:  756:				}
    #####:  757:				if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  758:				{
    #####:  759:					for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  760:					{
        -:  761:						if (DEBUG)
        -:  762:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  763:					}
    #####:  764:					break;
        -:  765:				}
        -:  766:			}
        -:  767:
        -:  768:		}
        -:  769:
        -:  770:	}
        -:  771:
        -:  772:	//discard played card from hand
    #####:  773:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  774:
    #####:  775:	return 0;
        -:  776:}
        -:  777:
        -:  778:
        -:  779:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  780:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  781:{
    #####:  782:  int i = 0;
    #####:  783:  int j = 0;
    #####:  784:  int k = 0;
        -:  785:  int x;
        -:  786:  int index;
    #####:  787:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  788:  int nextPlayer = currentPlayer + 1;
        -:  789:
    #####:  790:  int tributeRevealedCards[2] = {-1, -1};
        -:  791:  int temphand[MAX_HAND];// moved above the if statement
    #####:  792:  int drawntreasure=0;
    #####:  793:  int cardDrawn = 0;
    #####:  794:  int z = 0;// this is the counter for the temp hand
    #####:  795:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  796:    nextPlayer = 0;
        -:  797:  }
        -:  798:  
        -:  799:	
        -:  800:  //uses switch to select card and perform actions
    #####:  801:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  802:    {
    #####:  803:    case adventurer:
        -:  804:		//Custom function 1/5: Adventurer
    #####:  805:		playAdventurer(drawntreasure, currentPlayer, cardDrawn, temphand, z, state);
call    0 never executed
    #####:  806:		return 0;
        -:  807:			
    #####:  808:    case council_room:
        -:  809:      //+4 Cards
    #####:  810:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  811:	{
    #####:  812:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  813:	}
        -:  814:			
        -:  815:      //+1 Buy
    #####:  816:      state->numBuys++;
        -:  817:			
        -:  818:      //Each other player draws a card
    #####:  819:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  820:	{
    #####:  821:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  822:	    {
    #####:  823:	      drawCard(i, state);
call    0 never executed
        -:  824:	    }
        -:  825:	}
        -:  826:			
        -:  827:      //put played card in played card pile
    #####:  828:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  829:			
    #####:  830:      return 0;
        -:  831:			
    #####:  832:    case feast:
        -:  833:      //gain card with cost up to 5
        -:  834:      //Backup hand
    #####:  835:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  836:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  837:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  838:      }
        -:  839:      //Backup hand
        -:  840:
        -:  841:      //Update Coins for Buy
    #####:  842:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  843:      x = 1;//Condition to loop on
    #####:  844:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  845:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  846:	  if (DEBUG)
        -:  847:	    printf("None of that card left, sorry!\n");
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  851:	  }
        -:  852:	}
    #####:  853:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  854:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  858:	  }
        -:  859:	}
        -:  860:	else{
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
    #####:  866:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  867:	  x = 0;//No more buying cards
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
        -:  873:	}
        -:  874:      }     
        -:  875:
        -:  876:      //Reset Hand
    #####:  877:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  878:	state->hand[currentPlayer][i] = temphand[i];
    #####:  879:	temphand[i] = -1;
        -:  880:      }
        -:  881:      //Reset Hand
        -:  882:      			
    #####:  883:      return 0;
        -:  884:			
    #####:  885:    case gardens:
    #####:  886:      return -1;
        -:  887:			
    #####:  888:    case mine:
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:		
    #####:  896:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  897:	{
    #####:  898:	  return -1;
        -:  899:	}
        -:  900:
    #####:  901:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  902:	{
    #####:  903:	  return -1;
        -:  904:	}
        -:  905:
    #####:  906:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  907:
        -:  908:      //discard card from hand
    #####:  909:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  910:
        -:  911:      //discard trashed card
    #####:  912:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  913:	{
    #####:  914:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  915:	    {
    #####:  916:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  917:	      break;
        -:  918:	    }
        -:  919:	}
        -:  920:			
    #####:  921:      return 0;
        -:  922:			
    #####:  923:    case remodel:
    #####:  924:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  925:
    #####:  926:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  927:	{
    #####:  928:	  return -1;
        -:  929:	}
        -:  930:
    #####:  931:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  932:
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  935:
        -:  936:      //discard trashed card
    #####:  937:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  940:	    {
    #####:  941:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  942:	      break;
        -:  943:	    }
        -:  944:	}
        -:  945:
        -:  946:
    #####:  947:      return 0;
        -:  948:		
    #####:  949:    case smithy:
        -:  950:		//Custom function 2/5: Smithy
    #####:  951:		playSmithy(i, currentPlayer, handPos, state);
call    0 never executed
    #####:  952:		return 0;
        -:  953:		
    #####:  954:    case village:
        -:  955:		//Custom function 3/5: Village
    #####:  956:		playVillage(currentPlayer, handPos, state);
call    0 never executed
    #####:  957:		return 0;
        -:  958:		
    #####:  959:    case baron:
    #####:  960:      state->numBuys++;//Increase buys by 1!
    #####:  961:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  962:	int p = 0;//Iterator for hand!
    #####:  963:	int card_not_discarded = 1;//Flag for discard set!
    #####:  964:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  965:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  966:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  967:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  968:	    state->discardCount[currentPlayer]++;
    #####:  969:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  970:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  971:	    }
    #####:  972:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  973:	    state->handCount[currentPlayer]--;
    #####:  974:	    card_not_discarded = 0;//Exit the loop
        -:  975:	  }
    #####:  976:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  977:	    if(DEBUG) {
        -:  978:	      printf("No estate cards in your hand, invalid choice\n");
        -:  979:	      printf("Must gain an estate if there are any\n");
        -:  980:	    }
    #####:  981:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  982:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  983:	      state->supplyCount[estate]--;//Decrement estates
    #####:  984:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  985:		isGameOver(state);
call    0 never executed
        -:  986:	      }
        -:  987:	    }
    #####:  988:	    card_not_discarded = 0;//Exit the loop
        -:  989:	  }
        -:  990:			    
        -:  991:	  else{
    #####:  992:	    p++;//Next card
        -:  993:	  }
        -:  994:	}
        -:  995:      }
        -:  996:			    
        -:  997:      else{
    #####:  998:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  999:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1000:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1001:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:	    isGameOver(state);
call    0 never executed
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      
    #####: 1008:      return 0;
        -: 1009:		
    #####: 1010:    case great_hall:
        -: 1011:      //+1 Card
    #####: 1012:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1013:			
        -: 1014:      //+1 Actions
    #####: 1015:      state->numActions++;
        -: 1016:			
        -: 1017:      //discard card from hand
    #####: 1018:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1019:      return 0;
        -: 1020:		
    #####: 1021:    case minion:
        -: 1022:		//Custom function 4/5: Minion
    #####: 1023:		playMinion(i, j, currentPlayer, handPos, choice1, choice2, state);
call    0 never executed
    #####: 1024:		return 0;
        -: 1025:		
    #####: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
        -: 1029:	  //+2 cards
    #####: 1030:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1031:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1032:	}
    #####: 1033:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
        -: 1035:	  //+2 coins
    #####: 1036:	  state->coins = state->coins + 2;
        -: 1037:	}
        -: 1038:      else
        -: 1039:	{
        -: 1040:	  //trash 2 cards in hand
    #####: 1041:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1042:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1043:	}
        -: 1044:			
        -: 1045:      //discard card from hand
    #####: 1046:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1047:      return 0;
        -: 1048:		
    #####: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1051:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	  state->deckCount[nextPlayer]--;
        -: 1054:	}
    #####: 1055:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:	  state->discardCount[nextPlayer]--;
        -: 1058:	}
        -: 1059:	else{
        -: 1060:	  //No Card to Reveal
        -: 1061:	  if (DEBUG){
        -: 1062:	    printf("No cards to reveal\n");
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:	    
        -: 1067:      else{
    #####: 1068:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1070:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:	    state->deckCount[nextPlayer]++;
    #####: 1072:	    state->discard[nextPlayer][i] = -1;
    #####: 1073:	    state->discardCount[nextPlayer]--;
        -: 1074:	  }
        -: 1075:			    
    #####: 1076:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1077:	} 
    #####: 1078:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
    #####: 1081:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
        -: 1084:      }    
        -: 1085:		       
    #####: 1086:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1087:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:	state->playedCardCount++;
    #####: 1089:	tributeRevealedCards[1] = -1;
        -: 1090:      }
        -: 1091:
    #####: 1092:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1093:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        -: 1096:		    
    #####: 1097:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1098:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1099:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1100:	}
        -: 1101:	else{//Action Card
    #####: 1102:	  state->numActions = state->numActions + 2;
        -: 1103:	}
        -: 1104:      }
        -: 1105:	    
    #####: 1106:      return 0;
        -: 1107:		
    #####: 1108:    case ambassador:
    #####: 1109:      j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
    #####: 1116:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1124:	    {
    #####: 1125:	      j++;
        -: 1126:	    }
        -: 1127:	}
    #####: 1128:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;				
        -: 1131:	}
        -: 1132:
        -: 1133:      if (DEBUG) 
        -: 1134:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:      //increase supply count for choosen card by amount being discarded
    #####: 1137:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:			
        -: 1139:      //each other player gains a copy of revealed card
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1145:	    }
        -: 1146:	}
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1150:
        -: 1151:      //trash copies of cards returned to supply
    #####: 1152:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
    #####: 1154:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1157:		{
    #####: 1158:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:		  break;
        -: 1160:		}
        -: 1161:	    }
        -: 1162:	}			
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:		
    #####: 1166:    case cutpurse:
        -: 1167:		//Custom function 5/5: Cutpurse
    #####: 1168:		playCutpurse(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1169:		return 0;
        -: 1170:
    #####: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
    #####: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
    #####: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
    #####: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
    #####: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 80 returned 100% blocks executed 89%
       80: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       80: 1260:  if (trashFlag < 1)
branch  0 taken 40 (fallthrough)
branch  1 taken 40
        -: 1261:    {
        -: 1262:      //add card to played pile
       40: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       40: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       80: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       80: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 4 (fallthrough)
branch  1 taken 76
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
        4: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
       76: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 76
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       76: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       76: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       76: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
       80: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 440 returned 100% blocks executed 100%
      440: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
      440: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 440
branch  1 taken 136 (fallthrough)
branch  2 taken 304
        -: 1300:    {
      136: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
      304: 1309:  if (toFlag == 1)
branch  0 taken 40 (fallthrough)
branch  1 taken 264
        -: 1310:    {
       40: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       40: 1312:      state->deckCount[player]++;
        -: 1313:    }
      264: 1314:  else if (toFlag == 2)
branch  0 taken 224 (fallthrough)
branch  1 taken 40
        -: 1315:    {
      224: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      224: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
       40: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       40: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
      304: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
      304: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 132144 returned 100% blocks executed 100%
   132144: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
   132144: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
 16929864: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 16797720
branch  1 taken 132144 (fallthrough)
        -: 1340:    {
 16797720: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 5753576 (fallthrough)
branch  1 taken 11044144
        -: 1342:	{
  5753576: 1343:	  state->coins += 1;
        -: 1344:	}
 11044144: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 5489000 (fallthrough)
branch  1 taken 5555144
        -: 1346:	{
  5489000: 1347:	  state->coins += 2;
        -: 1348:	}
  5555144: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 5489000 (fallthrough)
branch  1 taken 66144
        -: 1350:	{
  5489000: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
   132144: 1356:  state->coins += bonus;
        -: 1357:
   132144: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361://end of dominion.c
unittest4.c:
Tests for drawCard completed.
File 'dominion.c'
Lines executed:22.30% of 601
Branches executed:21.16% of 397
Taken at least once:18.64% of 397
Calls executed:10.00% of 90
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:4
        -:    0:Programs:4
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3969120 returned 100% blocks executed 83%
  3969120:    8:int compare(const void* a, const void* b) {
  3969120:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 3969120
    #####:   10:    return 1;
  3969120:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 1058432 (fallthrough)
branch  1 taken 2910688
  1058432:   12:    return -1;
  2910688:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 66152 returned 100% blocks executed 89%
    66152:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    66152:   44:  SelectStream(1);
call    0 returned 66152
    66152:   45:  PutSeed((long)randomSeed);
call    0 returned 66152
        -:   46:  
        -:   47:  //check number of players
    66152:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 66152 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 66152
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    66152:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   727672:   57:  for (i = 0; i < 10; i++)
branch  0 taken 661520
branch  1 taken 66152 (fallthrough)
        -:   58:    {
  7276720:   59:      for (j = 0; j < 10; j++)
branch  0 taken 6615200
branch  1 taken 661520 (fallthrough)
        -:   60:        {
  6615200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 5953680 (fallthrough)
branch  1 taken 661520
branch  2 taken 0 (fallthrough)
branch  3 taken 5953680
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    66152:   73:  if (numPlayers == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 66152
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    66152:   77:  else if (numPlayers == 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 66152
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    66152:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    66152:   87:  if (numPlayers == 2)
branch  0 taken 0 (fallthrough)
branch  1 taken 66152
        -:   88:    {
    #####:   89:      state->supplyCount[estate] = 8;
    #####:   90:      state->supplyCount[duchy] = 8;
    #####:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    66152:   95:      state->supplyCount[estate] = 12;
    66152:   96:      state->supplyCount[duchy] = 12;
    66152:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    66152:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    66152:  102:  state->supplyCount[silver] = 40;
    66152:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  1389192:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 1323040
branch  1 taken 66152 (fallthrough)
        -:  107:    {
 10915080:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 10253560
branch  1 taken 661520 (fallthrough)
        -:  109:	{
 10253560:  110:	  if (kingdomCards[j] == i)
branch  0 taken 661520 (fallthrough)
branch  1 taken 9592040
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   661520:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 595368 (fallthrough)
branch  1 taken 66152
branch  2 taken 66152 (fallthrough)
branch  3 taken 529216
        -:  114:		{
   264608:  115:		  if (numPlayers == 2){ 
branch  0 taken 0 (fallthrough)
branch  1 taken 132304
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
   132304:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   529216:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   661520:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  9592040:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   330760:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264608
branch  1 taken 66152 (fallthrough)
        -:  139:    {
   264608:  140:      state->deckCount[i] = 0;
  1058432:  141:      for (j = 0; j < 3; j++)
branch  0 taken 793824
branch  1 taken 264608 (fallthrough)
        -:  142:	{
   793824:  143:	  state->deck[i][j] = estate;
   793824:  144:	  state->deckCount[i]++;
        -:  145:	}
  2116864:  146:      for (j = 3; j < 10; j++)
branch  0 taken 1852256
branch  1 taken 264608 (fallthrough)
        -:  147:	{
  1852256:  148:	  state->deck[i][j] = copper;
  1852256:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   330760:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264608
branch  1 taken 66152 (fallthrough)
        -:  155:    {
   264608:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 264608
branch  1 taken 0 (fallthrough)
branch  2 taken 264608
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   330760:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264608
branch  1 taken 66152 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   264608:  166:      state->handCount[i] = 0;
   264608:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  1852256:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 1786104
branch  1 taken 66152 (fallthrough)
        -:  177:    {
  1786104:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    66152:  182:  state->outpostPlayed = 0;
    66152:  183:  state->phase = 0;
    66152:  184:  state->numActions = 1;
    66152:  185:  state->numBuys = 1;
    66152:  186:  state->playedCardCount = 0;
    66152:  187:  state->whoseTurn = 0;
    66152:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   396912:  192:  for (it = 0; it < 5; it++){
branch  0 taken 330760
branch  1 taken 66152 (fallthrough)
   330760:  193:    drawCard(state->whoseTurn, state);
call    0 returned 330760
        -:  194:  }
        -:  195:
    66152:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 66152
        -:  197:
    66152:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 264616 returned 100% blocks executed 100%
   264616:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   264616:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   264616:  209:  if (state->deckCount[player] < 1)
branch  0 taken 4 (fallthrough)
branch  1 taken 264612
        4:  210:    return -1;
   264612:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 264612
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  3175308:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 2646084
branch  1 taken 264612 (fallthrough)
  2646084:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 2646084
  2646084:  216:    newDeck[newDeckPos] = state->deck[player][card];
  2646084:  217:    newDeckPos++;
  8665916:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 6019832
branch  1 taken 2646084 (fallthrough)
  6019832:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  2646084:  221:    state->deckCount[player]--;
        -:  222:  }
  2910696:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 2646084
branch  1 taken 264612 (fallthrough)
  2646084:  224:    state->deck[player][i] = newDeck[i];
  2646084:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   264612:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 444 returned 100% blocks executed 100%
      444:  320:int supplyCount(int card, struct gameState *state) {
      444:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 0 returned 0% blocks executed 0%
    #####:  346:int whoseTurn(struct gameState *state) {
    #####:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 330838 returned 100% blocks executed 100%
   330838:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   330838:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 8 (fallthrough)
branch  1 taken 330830
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       12:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 4
branch  1 taken 8 (fallthrough)
        4:  534:      state->deck[player][i] = state->discard[player][i];
        4:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        8:  538:    state->deckCount[player] = state->discardCount[player];
        8:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        8:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 8
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        8:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        8:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        8:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        8:  559:    if (deckCounter == 0)
branch  0 taken 4 (fallthrough)
branch  1 taken 4
        4:  560:      return -1;
        -:  561:
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:    state->deckCount[player]--;
        4:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   330830:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   330830:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   330830:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   330830:  576:    state->deckCount[player]--;
   330830:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   330834:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
    #####:  587:    case curse:
    #####:  588:      return 0;
    #####:  589:    case estate:
    #####:  590:      return 2;
    #####:  591:    case duchy:
    #####:  592:      return 5;
    #####:  593:    case province:
    #####:  594:      return 8;
    #####:  595:    case copper:
    #####:  596:      return 0;
    #####:  597:    case silver:
    #####:  598:      return 3;
    #####:  599:    case gold:
    #####:  600:      return 6;
    #####:  601:    case adventurer:
    #####:  602:      return 6;
    #####:  603:    case council_room:
    #####:  604:      return 5;
    #####:  605:    case feast:
    #####:  606:      return 4;
    #####:  607:    case gardens:
    #####:  608:      return 4;
    #####:  609:    case mine:
    #####:  610:      return 5;
    #####:  611:    case remodel:
    #####:  612:      return 4;
    #####:  613:    case smithy:
    #####:  614:      return 4;
    #####:  615:    case village:
    #####:  616:      return 3;
    #####:  617:    case baron:
    #####:  618:      return 4;
    #####:  619:    case great_hall:
    #####:  620:      return 3;
    #####:  621:    case minion:
    #####:  622:      return 5;
    #####:  623:    case steward:
    #####:  624:      return 3;
    #####:  625:    case tribute:
    #####:  626:      return 5;
    #####:  627:    case ambassador:
    #####:  628:      return 3;
    #####:  629:    case cutpurse:
    #####:  630:      return 4;
    #####:  631:    case embargo: 
    #####:  632:      return 2;
    #####:  633:    case outpost:
    #####:  634:      return 5;
    #####:  635:    case salvager:
    #####:  636:      return 4;
    #####:  637:    case sea_hag:
    #####:  638:      return 4;
    #####:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function playAdventurer called 0 returned 0% blocks executed 0%
    #####:  646:int playAdventurer(int drawntreasure, int currentPlayer, int cardDrawn, int *temphand, int z, struct gameState *state) {
    #####:  647:	while (drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  648:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  649:			shuffle(currentPlayer, state);
call    0 never executed
        -:  650:		}
    #####:  651:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  652:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  653:		if (cardDrawn == copper || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  654:			drawntreasure++;
        -:  655:		else {
    #####:  656:			temphand[z] = cardDrawn;
    #####:  657:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  658:			z++;
        -:  659:		}
        -:  660:	}
    #####:  661:	while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  662:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  663:		z = z - 1;
        -:  664:	}
    #####:  665:	return 0;
        -:  666:}
        -:  667:
function playSmithy called 0 returned 0% blocks executed 0%
    #####:  668:int playSmithy(int i, int currentPlayer, int handPos, struct gameState *state) {
        -:  669:	//+3 Cards
    #####:  670:	for (i = 0; i < 3; i++)
branch  0 never executed
branch  1 never executed
        -:  671:	{
    #####:  672:		drawCard(currentPlayer, state);
call    0 never executed
        -:  673:	}
        -:  674:
        -:  675:	//discard card from hand
    #####:  676:	discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####:  677:	return 0;
        -:  678:}
        -:  679:
function playVillage called 0 returned 0% blocks executed 0%
    #####:  680:int playVillage(int currentPlayer, int handPos, struct gameState *state) {
        -:  681:	//+1 Card
    #####:  682:	drawCard(currentPlayer, state);
call    0 never executed
        -:  683:
        -:  684:	//+2 Actions
    #####:  685:	state->numActions = 2;
        -:  686:
        -:  687:	//discard played card from hand
    #####:  688:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  689:	return 0;
        -:  690:}
        -:  691:
function playMinion called 0 returned 0% blocks executed 0%
    #####:  692:int playMinion(int i, int j, int currentPlayer, int handPos, int choice1, int choice2, struct gameState *state) {
        -:  693:	//+1 action
    #####:  694:	state->numActions++;
        -:  695:
        -:  696:	//discard card from hand
    #####:  697:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:	if (1)		//+2 coins
        -:  700:	{
    #####:  701:		state->coins = state->coins + 2;
        -:  702:	}
        -:  703:
        -:  704:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  705:	{
        -:  706:		//discard hand
        -:  707:		while (numHandCards(state) > 0)
        -:  708:		{
        -:  709:			discardCard(handPos, currentPlayer, state, 0);
        -:  710:		}
        -:  711:
        -:  712:		//draw 4
        -:  713:		for (i = 0; i < 4; i++)
        -:  714:		{
        -:  715:			drawCard(currentPlayer, state);
        -:  716:		}
        -:  717:
        -:  718:		//other players discard hand and redraw if hand size > 4
        -:  719:		for (i = 0; i < state->numPlayers; i++)
        -:  720:		{
        -:  721:			if (i != currentPlayer)
        -:  722:			{
        -:  723:				if (state->handCount[i] > 4)
        -:  724:				{
        -:  725:					//discard hand
        -:  726:					while (state->handCount[i] > 0)
        -:  727:					{
        -:  728:						discardCard(handPos, i, state, 0);
        -:  729:					}
        -:  730:
        -:  731:					//draw 4
        -:  732:					for (j = 0; j < 4; j++)
        -:  733:					{
        -:  734:						drawCard(i, state);
        -:  735:					}
        -:  736:				}
        -:  737:			}
        -:  738:		}
        -:  739:
        -:  740:	}
    #####:  741:	return 0;
        -:  742:}
        -:  743:
function playCutpurse called 0 returned 0% blocks executed 0%
    #####:  744:int playCutpurse(int i, int j, int k, int currentPlayer, int handPos, struct gameState *state) {
    #####:  745:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  746:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  747:	{
    #####:  748:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  749:		{
    #####:  750:			for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  751:			{
    #####:  752:				if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  753:				{
    #####:  754:					discardCard(j, i, state, 0);
call    0 never executed
    #####:  755:					break;
        -:  756:				}
    #####:  757:				if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  758:				{
    #####:  759:					for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  760:					{
        -:  761:						if (DEBUG)
        -:  762:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  763:					}
    #####:  764:					break;
        -:  765:				}
        -:  766:			}
        -:  767:
        -:  768:		}
        -:  769:
        -:  770:	}
        -:  771:
        -:  772:	//discard played card from hand
    #####:  773:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  774:
    #####:  775:	return 0;
        -:  776:}
        -:  777:
        -:  778:
        -:  779:
function cardEffect called 0 returned 0% blocks executed 0%
    #####:  780:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  781:{
    #####:  782:  int i = 0;
    #####:  783:  int j = 0;
    #####:  784:  int k = 0;
        -:  785:  int x;
        -:  786:  int index;
    #####:  787:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  788:  int nextPlayer = currentPlayer + 1;
        -:  789:
    #####:  790:  int tributeRevealedCards[2] = {-1, -1};
        -:  791:  int temphand[MAX_HAND];// moved above the if statement
    #####:  792:  int drawntreasure=0;
    #####:  793:  int cardDrawn = 0;
    #####:  794:  int z = 0;// this is the counter for the temp hand
    #####:  795:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 never executed
branch  1 never executed
    #####:  796:    nextPlayer = 0;
        -:  797:  }
        -:  798:  
        -:  799:	
        -:  800:  //uses switch to select card and perform actions
    #####:  801:  switch( card ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
        -:  802:    {
    #####:  803:    case adventurer:
        -:  804:		//Custom function 1/5: Adventurer
    #####:  805:		playAdventurer(drawntreasure, currentPlayer, cardDrawn, temphand, z, state);
call    0 never executed
    #####:  806:		return 0;
        -:  807:			
    #####:  808:    case council_room:
        -:  809:      //+4 Cards
    #####:  810:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  811:	{
    #####:  812:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  813:	}
        -:  814:			
        -:  815:      //+1 Buy
    #####:  816:      state->numBuys++;
        -:  817:			
        -:  818:      //Each other player draws a card
    #####:  819:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  820:	{
    #####:  821:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  822:	    {
    #####:  823:	      drawCard(i, state);
call    0 never executed
        -:  824:	    }
        -:  825:	}
        -:  826:			
        -:  827:      //put played card in played card pile
    #####:  828:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  829:			
    #####:  830:      return 0;
        -:  831:			
    #####:  832:    case feast:
        -:  833:      //gain card with cost up to 5
        -:  834:      //Backup hand
    #####:  835:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  836:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  837:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  838:      }
        -:  839:      //Backup hand
        -:  840:
        -:  841:      //Update Coins for Buy
    #####:  842:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  843:      x = 1;//Condition to loop on
    #####:  844:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  845:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  846:	  if (DEBUG)
        -:  847:	    printf("None of that card left, sorry!\n");
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  851:	  }
        -:  852:	}
    #####:  853:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  854:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  858:	  }
        -:  859:	}
        -:  860:	else{
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
    #####:  866:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  867:	  x = 0;//No more buying cards
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
        -:  873:	}
        -:  874:      }     
        -:  875:
        -:  876:      //Reset Hand
    #####:  877:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  878:	state->hand[currentPlayer][i] = temphand[i];
    #####:  879:	temphand[i] = -1;
        -:  880:      }
        -:  881:      //Reset Hand
        -:  882:      			
    #####:  883:      return 0;
        -:  884:			
    #####:  885:    case gardens:
    #####:  886:      return -1;
        -:  887:			
    #####:  888:    case mine:
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:		
    #####:  896:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  897:	{
    #####:  898:	  return -1;
        -:  899:	}
        -:  900:
    #####:  901:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  902:	{
    #####:  903:	  return -1;
        -:  904:	}
        -:  905:
    #####:  906:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  907:
        -:  908:      //discard card from hand
    #####:  909:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  910:
        -:  911:      //discard trashed card
    #####:  912:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  913:	{
    #####:  914:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  915:	    {
    #####:  916:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  917:	      break;
        -:  918:	    }
        -:  919:	}
        -:  920:			
    #####:  921:      return 0;
        -:  922:			
    #####:  923:    case remodel:
    #####:  924:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  925:
    #####:  926:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  927:	{
    #####:  928:	  return -1;
        -:  929:	}
        -:  930:
    #####:  931:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  932:
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  935:
        -:  936:      //discard trashed card
    #####:  937:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  940:	    {
    #####:  941:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  942:	      break;
        -:  943:	    }
        -:  944:	}
        -:  945:
        -:  946:
    #####:  947:      return 0;
        -:  948:		
    #####:  949:    case smithy:
        -:  950:		//Custom function 2/5: Smithy
    #####:  951:		playSmithy(i, currentPlayer, handPos, state);
call    0 never executed
    #####:  952:		return 0;
        -:  953:		
    #####:  954:    case village:
        -:  955:		//Custom function 3/5: Village
    #####:  956:		playVillage(currentPlayer, handPos, state);
call    0 never executed
    #####:  957:		return 0;
        -:  958:		
    #####:  959:    case baron:
    #####:  960:      state->numBuys++;//Increase buys by 1!
    #####:  961:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  962:	int p = 0;//Iterator for hand!
    #####:  963:	int card_not_discarded = 1;//Flag for discard set!
    #####:  964:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  965:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  966:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  967:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  968:	    state->discardCount[currentPlayer]++;
    #####:  969:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  970:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  971:	    }
    #####:  972:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  973:	    state->handCount[currentPlayer]--;
    #####:  974:	    card_not_discarded = 0;//Exit the loop
        -:  975:	  }
    #####:  976:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  977:	    if(DEBUG) {
        -:  978:	      printf("No estate cards in your hand, invalid choice\n");
        -:  979:	      printf("Must gain an estate if there are any\n");
        -:  980:	    }
    #####:  981:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  982:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  983:	      state->supplyCount[estate]--;//Decrement estates
    #####:  984:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  985:		isGameOver(state);
call    0 never executed
        -:  986:	      }
        -:  987:	    }
    #####:  988:	    card_not_discarded = 0;//Exit the loop
        -:  989:	  }
        -:  990:			    
        -:  991:	  else{
    #####:  992:	    p++;//Next card
        -:  993:	  }
        -:  994:	}
        -:  995:      }
        -:  996:			    
        -:  997:      else{
    #####:  998:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  999:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1000:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1001:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:	    isGameOver(state);
call    0 never executed
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      
    #####: 1008:      return 0;
        -: 1009:		
    #####: 1010:    case great_hall:
        -: 1011:      //+1 Card
    #####: 1012:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1013:			
        -: 1014:      //+1 Actions
    #####: 1015:      state->numActions++;
        -: 1016:			
        -: 1017:      //discard card from hand
    #####: 1018:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1019:      return 0;
        -: 1020:		
    #####: 1021:    case minion:
        -: 1022:		//Custom function 4/5: Minion
    #####: 1023:		playMinion(i, j, currentPlayer, handPos, choice1, choice2, state);
call    0 never executed
    #####: 1024:		return 0;
        -: 1025:		
    #####: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
        -: 1029:	  //+2 cards
    #####: 1030:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1031:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1032:	}
    #####: 1033:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
        -: 1035:	  //+2 coins
    #####: 1036:	  state->coins = state->coins + 2;
        -: 1037:	}
        -: 1038:      else
        -: 1039:	{
        -: 1040:	  //trash 2 cards in hand
    #####: 1041:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1042:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1043:	}
        -: 1044:			
        -: 1045:      //discard card from hand
    #####: 1046:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1047:      return 0;
        -: 1048:		
    #####: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1051:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	  state->deckCount[nextPlayer]--;
        -: 1054:	}
    #####: 1055:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:	  state->discardCount[nextPlayer]--;
        -: 1058:	}
        -: 1059:	else{
        -: 1060:	  //No Card to Reveal
        -: 1061:	  if (DEBUG){
        -: 1062:	    printf("No cards to reveal\n");
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:	    
        -: 1067:      else{
    #####: 1068:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1070:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:	    state->deckCount[nextPlayer]++;
    #####: 1072:	    state->discard[nextPlayer][i] = -1;
    #####: 1073:	    state->discardCount[nextPlayer]--;
        -: 1074:	  }
        -: 1075:			    
    #####: 1076:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1077:	} 
    #####: 1078:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
    #####: 1081:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
        -: 1084:      }    
        -: 1085:		       
    #####: 1086:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1087:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:	state->playedCardCount++;
    #####: 1089:	tributeRevealedCards[1] = -1;
        -: 1090:      }
        -: 1091:
    #####: 1092:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1093:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        -: 1096:		    
    #####: 1097:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1098:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1099:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1100:	}
        -: 1101:	else{//Action Card
    #####: 1102:	  state->numActions = state->numActions + 2;
        -: 1103:	}
        -: 1104:      }
        -: 1105:	    
    #####: 1106:      return 0;
        -: 1107:		
    #####: 1108:    case ambassador:
    #####: 1109:      j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
    #####: 1116:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1124:	    {
    #####: 1125:	      j++;
        -: 1126:	    }
        -: 1127:	}
    #####: 1128:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;				
        -: 1131:	}
        -: 1132:
        -: 1133:      if (DEBUG) 
        -: 1134:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:      //increase supply count for choosen card by amount being discarded
    #####: 1137:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:			
        -: 1139:      //each other player gains a copy of revealed card
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1145:	    }
        -: 1146:	}
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1150:
        -: 1151:      //trash copies of cards returned to supply
    #####: 1152:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
    #####: 1154:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1157:		{
    #####: 1158:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:		  break;
        -: 1160:		}
        -: 1161:	    }
        -: 1162:	}			
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:		
    #####: 1166:    case cutpurse:
        -: 1167:		//Custom function 5/5: Cutpurse
    #####: 1168:		playCutpurse(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1169:		return 0;
        -: 1170:
    #####: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
    #####: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
    #####: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
    #####: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
    #####: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 80 returned 100% blocks executed 89%
       80: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       80: 1260:  if (trashFlag < 1)
branch  0 taken 40 (fallthrough)
branch  1 taken 40
        -: 1261:    {
        -: 1262:      //add card to played pile
       40: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       40: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       80: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       80: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 4 (fallthrough)
branch  1 taken 76
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
        4: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
       76: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 76
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       76: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       76: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       76: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
       80: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 444 returned 100% blocks executed 100%
      444: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
      444: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 444
branch  1 taken 136 (fallthrough)
branch  2 taken 308
        -: 1300:    {
      136: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
      308: 1309:  if (toFlag == 1)
branch  0 taken 40 (fallthrough)
branch  1 taken 268
        -: 1310:    {
       40: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       40: 1312:      state->deckCount[player]++;
        -: 1313:    }
      268: 1314:  else if (toFlag == 2)
branch  0 taken 224 (fallthrough)
branch  1 taken 44
        -: 1315:    {
      224: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      224: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
       44: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       44: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
      308: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
      308: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 132152 returned 100% blocks executed 100%
   132152: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
   132152: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
 16929912: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 16797760
branch  1 taken 132152 (fallthrough)
        -: 1340:    {
 16797760: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 5753608 (fallthrough)
branch  1 taken 11044152
        -: 1342:	{
  5753608: 1343:	  state->coins += 1;
        -: 1344:	}
 11044152: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 5489000 (fallthrough)
branch  1 taken 5555152
        -: 1346:	{
  5489000: 1347:	  state->coins += 2;
        -: 1348:	}
  5555152: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 5489000 (fallthrough)
branch  1 taken 66152
        -: 1350:	{
  5489000: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
   132152: 1356:  state->coins += bonus;
        -: 1357:
   132152: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361://end of dominion.c
cardtest1.c:
Tests for Smithy card completed.
File 'dominion.c'
Lines executed:28.95% of 601
Branches executed:29.97% of 397
Taken at least once:21.66% of 397
Calls executed:18.89% of 90
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:5
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3969420 returned 100% blocks executed 83%
  3969420:    8:int compare(const void* a, const void* b) {
  3969420:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 3969420
    #####:   10:    return 1;
  3969420:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 1058512 (fallthrough)
branch  1 taken 2910908
  1058512:   12:    return -1;
  2910908:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 66162 returned 100% blocks executed 92%
    66162:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    66162:   44:  SelectStream(1);
call    0 returned 66162
    66162:   45:  PutSeed((long)randomSeed);
call    0 returned 66162
        -:   46:  
        -:   47:  //check number of players
    66162:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 66162 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 66162
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    66162:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   727782:   57:  for (i = 0; i < 10; i++)
branch  0 taken 661620
branch  1 taken 66162 (fallthrough)
        -:   58:    {
  7277820:   59:      for (j = 0; j < 10; j++)
branch  0 taken 6616200
branch  1 taken 661620 (fallthrough)
        -:   60:        {
  6616200:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 5954580 (fallthrough)
branch  1 taken 661620
branch  2 taken 0 (fallthrough)
branch  3 taken 5954580
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    66162:   73:  if (numPlayers == 2)
branch  0 taken 10 (fallthrough)
branch  1 taken 66152
        -:   74:    {
       10:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    66152:   77:  else if (numPlayers == 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 66152
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    66152:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    66162:   87:  if (numPlayers == 2)
branch  0 taken 10 (fallthrough)
branch  1 taken 66152
        -:   88:    {
       10:   89:      state->supplyCount[estate] = 8;
       10:   90:      state->supplyCount[duchy] = 8;
       10:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    66152:   95:      state->supplyCount[estate] = 12;
    66152:   96:      state->supplyCount[duchy] = 12;
    66152:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    66162:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    66162:  102:  state->supplyCount[silver] = 40;
    66162:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  1389402:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 1323240
branch  1 taken 66162 (fallthrough)
        -:  107:    {
 10916730:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 10255110
branch  1 taken 661620 (fallthrough)
        -:  109:	{
 10255110:  110:	  if (kingdomCards[j] == i)
branch  0 taken 661620 (fallthrough)
branch  1 taken 9593490
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   661620:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 595468 (fallthrough)
branch  1 taken 66152
branch  2 taken 66152 (fallthrough)
branch  3 taken 529316
        -:  114:		{
   264608:  115:		  if (numPlayers == 2){ 
branch  0 taken 0 (fallthrough)
branch  1 taken 132304
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
   132304:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   529316:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   661620:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  9593490:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   330790:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264628
branch  1 taken 66162 (fallthrough)
        -:  139:    {
   264628:  140:      state->deckCount[i] = 0;
  1058512:  141:      for (j = 0; j < 3; j++)
branch  0 taken 793884
branch  1 taken 264628 (fallthrough)
        -:  142:	{
   793884:  143:	  state->deck[i][j] = estate;
   793884:  144:	  state->deckCount[i]++;
        -:  145:	}
  2117024:  146:      for (j = 3; j < 10; j++)
branch  0 taken 1852396
branch  1 taken 264628 (fallthrough)
        -:  147:	{
  1852396:  148:	  state->deck[i][j] = copper;
  1852396:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   330790:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264628
branch  1 taken 66162 (fallthrough)
        -:  155:    {
   264628:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 264628
branch  1 taken 0 (fallthrough)
branch  2 taken 264628
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   330790:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264628
branch  1 taken 66162 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   264628:  166:      state->handCount[i] = 0;
   264628:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  1852536:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 1786374
branch  1 taken 66162 (fallthrough)
        -:  177:    {
  1786374:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    66162:  182:  state->outpostPlayed = 0;
    66162:  183:  state->phase = 0;
    66162:  184:  state->numActions = 1;
    66162:  185:  state->numBuys = 1;
    66162:  186:  state->playedCardCount = 0;
    66162:  187:  state->whoseTurn = 0;
    66162:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   396972:  192:  for (it = 0; it < 5; it++){
branch  0 taken 330810
branch  1 taken 66162 (fallthrough)
   330810:  193:    drawCard(state->whoseTurn, state);
call    0 returned 330810
        -:  194:  }
        -:  195:
    66162:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 66162
        -:  197:
    66162:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 264636 returned 100% blocks executed 100%
   264636:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   264636:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   264636:  209:  if (state->deckCount[player] < 1)
branch  0 taken 4 (fallthrough)
branch  1 taken 264632
        4:  210:    return -1;
   264632:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 264632
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  3175548:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 2646284
branch  1 taken 264632 (fallthrough)
  2646284:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 2646284
  2646284:  216:    newDeck[newDeckPos] = state->deck[player][card];
  2646284:  217:    newDeckPos++;
  8666686:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 6020402
branch  1 taken 2646284 (fallthrough)
  6020402:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  2646284:  221:    state->deckCount[player]--;
        -:  222:  }
  2910916:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 2646284
branch  1 taken 264632 (fallthrough)
  2646284:  224:    state->deck[player][i] = newDeck[i];
  2646284:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   264632:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 10 returned 100% blocks executed 73%
       10:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       10:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       10:  237:  if (state->phase != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       10:  243:  if ( state->numActions < 1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       10:  249:  card = handCard(handPos, state);
call    0 returned 10
        -:  250:	
        -:  251:  //check if selected card is an action
       10:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 10 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 10
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       10:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       10:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       10:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 10
        -:  268:	
       10:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 10 returned 100% blocks executed 100%
       10:  315:int handCard(int handPos, struct gameState *state) {
       10:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 10
       10:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 444 returned 100% blocks executed 100%
      444:  320:int supplyCount(int card, struct gameState *state) {
      444:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 20 returned 100% blocks executed 100%
       20:  346:int whoseTurn(struct gameState *state) {
       20:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 330918 returned 100% blocks executed 100%
   330918:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   330918:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 8 (fallthrough)
branch  1 taken 330910
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
       12:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 4
branch  1 taken 8 (fallthrough)
        4:  534:      state->deck[player][i] = state->discard[player][i];
        4:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
        8:  538:    state->deckCount[player] = state->discardCount[player];
        8:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
        8:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 8
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
        8:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
        8:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
        8:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
        8:  559:    if (deckCounter == 0)
branch  0 taken 4 (fallthrough)
branch  1 taken 4
        4:  560:      return -1;
        -:  561:
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:    state->deckCount[player]--;
        4:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   330910:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   330910:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   330910:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   330910:  576:    state->deckCount[player]--;
   330910:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   330914:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
    #####:  587:    case curse:
    #####:  588:      return 0;
    #####:  589:    case estate:
    #####:  590:      return 2;
    #####:  591:    case duchy:
    #####:  592:      return 5;
    #####:  593:    case province:
    #####:  594:      return 8;
    #####:  595:    case copper:
    #####:  596:      return 0;
    #####:  597:    case silver:
    #####:  598:      return 3;
    #####:  599:    case gold:
    #####:  600:      return 6;
    #####:  601:    case adventurer:
    #####:  602:      return 6;
    #####:  603:    case council_room:
    #####:  604:      return 5;
    #####:  605:    case feast:
    #####:  606:      return 4;
    #####:  607:    case gardens:
    #####:  608:      return 4;
    #####:  609:    case mine:
    #####:  610:      return 5;
    #####:  611:    case remodel:
    #####:  612:      return 4;
    #####:  613:    case smithy:
    #####:  614:      return 4;
    #####:  615:    case village:
    #####:  616:      return 3;
    #####:  617:    case baron:
    #####:  618:      return 4;
    #####:  619:    case great_hall:
    #####:  620:      return 3;
    #####:  621:    case minion:
    #####:  622:      return 5;
    #####:  623:    case steward:
    #####:  624:      return 3;
    #####:  625:    case tribute:
    #####:  626:      return 5;
    #####:  627:    case ambassador:
    #####:  628:      return 3;
    #####:  629:    case cutpurse:
    #####:  630:      return 4;
    #####:  631:    case embargo: 
    #####:  632:      return 2;
    #####:  633:    case outpost:
    #####:  634:      return 5;
    #####:  635:    case salvager:
    #####:  636:      return 4;
    #####:  637:    case sea_hag:
    #####:  638:      return 4;
    #####:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function playAdventurer called 0 returned 0% blocks executed 0%
    #####:  646:int playAdventurer(int drawntreasure, int currentPlayer, int cardDrawn, int *temphand, int z, struct gameState *state) {
    #####:  647:	while (drawntreasure<2) {
branch  0 never executed
branch  1 never executed
    #####:  648:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####:  649:			shuffle(currentPlayer, state);
call    0 never executed
        -:  650:		}
    #####:  651:		drawCard(currentPlayer, state);
call    0 never executed
    #####:  652:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
    #####:  653:		if (cardDrawn == copper || cardDrawn == gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  654:			drawntreasure++;
        -:  655:		else {
    #####:  656:			temphand[z] = cardDrawn;
    #####:  657:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:  658:			z++;
        -:  659:		}
        -:  660:	}
    #####:  661:	while (z - 1 >= 0) {
branch  0 never executed
branch  1 never executed
    #####:  662:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
    #####:  663:		z = z - 1;
        -:  664:	}
    #####:  665:	return 0;
        -:  666:}
        -:  667:
function playSmithy called 10 returned 100% blocks executed 100%
       10:  668:int playSmithy(int i, int currentPlayer, int handPos, struct gameState *state) {
        -:  669:	//+3 Cards
       40:  670:	for (i = 0; i < 3; i++)
branch  0 taken 30
branch  1 taken 10 (fallthrough)
        -:  671:	{
       30:  672:		drawCard(currentPlayer, state);
call    0 returned 30
        -:  673:	}
        -:  674:
        -:  675:	//discard card from hand
       10:  676:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 10
       10:  677:	return 0;
        -:  678:}
        -:  679:
function playVillage called 0 returned 0% blocks executed 0%
    #####:  680:int playVillage(int currentPlayer, int handPos, struct gameState *state) {
        -:  681:	//+1 Card
    #####:  682:	drawCard(currentPlayer, state);
call    0 never executed
        -:  683:
        -:  684:	//+2 Actions
    #####:  685:	state->numActions = 2;
        -:  686:
        -:  687:	//discard played card from hand
    #####:  688:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  689:	return 0;
        -:  690:}
        -:  691:
function playMinion called 0 returned 0% blocks executed 0%
    #####:  692:int playMinion(int i, int j, int currentPlayer, int handPos, int choice1, int choice2, struct gameState *state) {
        -:  693:	//+1 action
    #####:  694:	state->numActions++;
        -:  695:
        -:  696:	//discard card from hand
    #####:  697:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:	if (1)		//+2 coins
        -:  700:	{
    #####:  701:		state->coins = state->coins + 2;
        -:  702:	}
        -:  703:
        -:  704:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  705:	{
        -:  706:		//discard hand
        -:  707:		while (numHandCards(state) > 0)
        -:  708:		{
        -:  709:			discardCard(handPos, currentPlayer, state, 0);
        -:  710:		}
        -:  711:
        -:  712:		//draw 4
        -:  713:		for (i = 0; i < 4; i++)
        -:  714:		{
        -:  715:			drawCard(currentPlayer, state);
        -:  716:		}
        -:  717:
        -:  718:		//other players discard hand and redraw if hand size > 4
        -:  719:		for (i = 0; i < state->numPlayers; i++)
        -:  720:		{
        -:  721:			if (i != currentPlayer)
        -:  722:			{
        -:  723:				if (state->handCount[i] > 4)
        -:  724:				{
        -:  725:					//discard hand
        -:  726:					while (state->handCount[i] > 0)
        -:  727:					{
        -:  728:						discardCard(handPos, i, state, 0);
        -:  729:					}
        -:  730:
        -:  731:					//draw 4
        -:  732:					for (j = 0; j < 4; j++)
        -:  733:					{
        -:  734:						drawCard(i, state);
        -:  735:					}
        -:  736:				}
        -:  737:			}
        -:  738:		}
        -:  739:
        -:  740:	}
    #####:  741:	return 0;
        -:  742:}
        -:  743:
function playCutpurse called 0 returned 0% blocks executed 0%
    #####:  744:int playCutpurse(int i, int j, int k, int currentPlayer, int handPos, struct gameState *state) {
    #####:  745:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  746:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  747:	{
    #####:  748:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  749:		{
    #####:  750:			for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  751:			{
    #####:  752:				if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  753:				{
    #####:  754:					discardCard(j, i, state, 0);
call    0 never executed
    #####:  755:					break;
        -:  756:				}
    #####:  757:				if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  758:				{
    #####:  759:					for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  760:					{
        -:  761:						if (DEBUG)
        -:  762:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  763:					}
    #####:  764:					break;
        -:  765:				}
        -:  766:			}
        -:  767:
        -:  768:		}
        -:  769:
        -:  770:	}
        -:  771:
        -:  772:	//discard played card from hand
    #####:  773:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  774:
    #####:  775:	return 0;
        -:  776:}
        -:  777:
        -:  778:
        -:  779:
function cardEffect called 10 returned 100% blocks executed 4%
       10:  780:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  781:{
       10:  782:  int i = 0;
       10:  783:  int j = 0;
       10:  784:  int k = 0;
        -:  785:  int x;
        -:  786:  int index;
       10:  787:  int currentPlayer = whoseTurn(state);
call    0 returned 10
       10:  788:  int nextPlayer = currentPlayer + 1;
        -:  789:
       10:  790:  int tributeRevealedCards[2] = {-1, -1};
        -:  791:  int temphand[MAX_HAND];// moved above the if statement
       10:  792:  int drawntreasure=0;
       10:  793:  int cardDrawn = 0;
       10:  794:  int z = 0;// this is the counter for the temp hand
       10:  795:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 5 (fallthrough)
branch  1 taken 5
        5:  796:    nextPlayer = 0;
        -:  797:  }
        -:  798:  
        -:  799:	
        -:  800:  //uses switch to select card and perform actions
       10:  801:  switch( card ) 
branch  0 taken 0
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 10
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  802:    {
    #####:  803:    case adventurer:
        -:  804:		//Custom function 1/5: Adventurer
    #####:  805:		playAdventurer(drawntreasure, currentPlayer, cardDrawn, temphand, z, state);
call    0 never executed
    #####:  806:		return 0;
        -:  807:			
    #####:  808:    case council_room:
        -:  809:      //+4 Cards
    #####:  810:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  811:	{
    #####:  812:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  813:	}
        -:  814:			
        -:  815:      //+1 Buy
    #####:  816:      state->numBuys++;
        -:  817:			
        -:  818:      //Each other player draws a card
    #####:  819:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  820:	{
    #####:  821:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  822:	    {
    #####:  823:	      drawCard(i, state);
call    0 never executed
        -:  824:	    }
        -:  825:	}
        -:  826:			
        -:  827:      //put played card in played card pile
    #####:  828:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  829:			
    #####:  830:      return 0;
        -:  831:			
    #####:  832:    case feast:
        -:  833:      //gain card with cost up to 5
        -:  834:      //Backup hand
    #####:  835:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  836:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  837:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  838:      }
        -:  839:      //Backup hand
        -:  840:
        -:  841:      //Update Coins for Buy
    #####:  842:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  843:      x = 1;//Condition to loop on
    #####:  844:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  845:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  846:	  if (DEBUG)
        -:  847:	    printf("None of that card left, sorry!\n");
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  851:	  }
        -:  852:	}
    #####:  853:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  854:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  858:	  }
        -:  859:	}
        -:  860:	else{
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
    #####:  866:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  867:	  x = 0;//No more buying cards
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
        -:  873:	}
        -:  874:      }     
        -:  875:
        -:  876:      //Reset Hand
    #####:  877:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  878:	state->hand[currentPlayer][i] = temphand[i];
    #####:  879:	temphand[i] = -1;
        -:  880:      }
        -:  881:      //Reset Hand
        -:  882:      			
    #####:  883:      return 0;
        -:  884:			
    #####:  885:    case gardens:
    #####:  886:      return -1;
        -:  887:			
    #####:  888:    case mine:
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:		
    #####:  896:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  897:	{
    #####:  898:	  return -1;
        -:  899:	}
        -:  900:
    #####:  901:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  902:	{
    #####:  903:	  return -1;
        -:  904:	}
        -:  905:
    #####:  906:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  907:
        -:  908:      //discard card from hand
    #####:  909:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  910:
        -:  911:      //discard trashed card
    #####:  912:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  913:	{
    #####:  914:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  915:	    {
    #####:  916:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  917:	      break;
        -:  918:	    }
        -:  919:	}
        -:  920:			
    #####:  921:      return 0;
        -:  922:			
    #####:  923:    case remodel:
    #####:  924:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  925:
    #####:  926:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  927:	{
    #####:  928:	  return -1;
        -:  929:	}
        -:  930:
    #####:  931:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  932:
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  935:
        -:  936:      //discard trashed card
    #####:  937:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  940:	    {
    #####:  941:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  942:	      break;
        -:  943:	    }
        -:  944:	}
        -:  945:
        -:  946:
    #####:  947:      return 0;
        -:  948:		
       10:  949:    case smithy:
        -:  950:		//Custom function 2/5: Smithy
       10:  951:		playSmithy(i, currentPlayer, handPos, state);
call    0 returned 10
       10:  952:		return 0;
        -:  953:		
    #####:  954:    case village:
        -:  955:		//Custom function 3/5: Village
    #####:  956:		playVillage(currentPlayer, handPos, state);
call    0 never executed
    #####:  957:		return 0;
        -:  958:		
    #####:  959:    case baron:
    #####:  960:      state->numBuys++;//Increase buys by 1!
    #####:  961:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  962:	int p = 0;//Iterator for hand!
    #####:  963:	int card_not_discarded = 1;//Flag for discard set!
    #####:  964:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  965:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  966:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  967:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  968:	    state->discardCount[currentPlayer]++;
    #####:  969:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  970:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  971:	    }
    #####:  972:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  973:	    state->handCount[currentPlayer]--;
    #####:  974:	    card_not_discarded = 0;//Exit the loop
        -:  975:	  }
    #####:  976:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  977:	    if(DEBUG) {
        -:  978:	      printf("No estate cards in your hand, invalid choice\n");
        -:  979:	      printf("Must gain an estate if there are any\n");
        -:  980:	    }
    #####:  981:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  982:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  983:	      state->supplyCount[estate]--;//Decrement estates
    #####:  984:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  985:		isGameOver(state);
call    0 never executed
        -:  986:	      }
        -:  987:	    }
    #####:  988:	    card_not_discarded = 0;//Exit the loop
        -:  989:	  }
        -:  990:			    
        -:  991:	  else{
    #####:  992:	    p++;//Next card
        -:  993:	  }
        -:  994:	}
        -:  995:      }
        -:  996:			    
        -:  997:      else{
    #####:  998:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  999:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1000:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1001:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:	    isGameOver(state);
call    0 never executed
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      
    #####: 1008:      return 0;
        -: 1009:		
    #####: 1010:    case great_hall:
        -: 1011:      //+1 Card
    #####: 1012:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1013:			
        -: 1014:      //+1 Actions
    #####: 1015:      state->numActions++;
        -: 1016:			
        -: 1017:      //discard card from hand
    #####: 1018:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1019:      return 0;
        -: 1020:		
    #####: 1021:    case minion:
        -: 1022:		//Custom function 4/5: Minion
    #####: 1023:		playMinion(i, j, currentPlayer, handPos, choice1, choice2, state);
call    0 never executed
    #####: 1024:		return 0;
        -: 1025:		
    #####: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
        -: 1029:	  //+2 cards
    #####: 1030:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1031:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1032:	}
    #####: 1033:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
        -: 1035:	  //+2 coins
    #####: 1036:	  state->coins = state->coins + 2;
        -: 1037:	}
        -: 1038:      else
        -: 1039:	{
        -: 1040:	  //trash 2 cards in hand
    #####: 1041:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1042:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1043:	}
        -: 1044:			
        -: 1045:      //discard card from hand
    #####: 1046:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1047:      return 0;
        -: 1048:		
    #####: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1051:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	  state->deckCount[nextPlayer]--;
        -: 1054:	}
    #####: 1055:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:	  state->discardCount[nextPlayer]--;
        -: 1058:	}
        -: 1059:	else{
        -: 1060:	  //No Card to Reveal
        -: 1061:	  if (DEBUG){
        -: 1062:	    printf("No cards to reveal\n");
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:	    
        -: 1067:      else{
    #####: 1068:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1070:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:	    state->deckCount[nextPlayer]++;
    #####: 1072:	    state->discard[nextPlayer][i] = -1;
    #####: 1073:	    state->discardCount[nextPlayer]--;
        -: 1074:	  }
        -: 1075:			    
    #####: 1076:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1077:	} 
    #####: 1078:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
    #####: 1081:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
        -: 1084:      }    
        -: 1085:		       
    #####: 1086:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1087:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:	state->playedCardCount++;
    #####: 1089:	tributeRevealedCards[1] = -1;
        -: 1090:      }
        -: 1091:
    #####: 1092:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1093:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        -: 1096:		    
    #####: 1097:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1098:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1099:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1100:	}
        -: 1101:	else{//Action Card
    #####: 1102:	  state->numActions = state->numActions + 2;
        -: 1103:	}
        -: 1104:      }
        -: 1105:	    
    #####: 1106:      return 0;
        -: 1107:		
    #####: 1108:    case ambassador:
    #####: 1109:      j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
    #####: 1116:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1124:	    {
    #####: 1125:	      j++;
        -: 1126:	    }
        -: 1127:	}
    #####: 1128:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;				
        -: 1131:	}
        -: 1132:
        -: 1133:      if (DEBUG) 
        -: 1134:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:      //increase supply count for choosen card by amount being discarded
    #####: 1137:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:			
        -: 1139:      //each other player gains a copy of revealed card
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1145:	    }
        -: 1146:	}
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1150:
        -: 1151:      //trash copies of cards returned to supply
    #####: 1152:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
    #####: 1154:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1157:		{
    #####: 1158:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:		  break;
        -: 1160:		}
        -: 1161:	    }
        -: 1162:	}			
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:		
    #####: 1166:    case cutpurse:
        -: 1167:		//Custom function 5/5: Cutpurse
    #####: 1168:		playCutpurse(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1169:		return 0;
        -: 1170:
    #####: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
    #####: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
    #####: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
    #####: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
    #####: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 90 returned 100% blocks executed 89%
       90: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       90: 1260:  if (trashFlag < 1)
branch  0 taken 40 (fallthrough)
branch  1 taken 50
        -: 1261:    {
        -: 1262:      //add card to played pile
       40: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       40: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       90: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       90: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 5 (fallthrough)
branch  1 taken 85
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
        5: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
       85: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 85
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       85: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       85: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       85: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
       90: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 444 returned 100% blocks executed 100%
      444: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
      444: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 444
branch  1 taken 136 (fallthrough)
branch  2 taken 308
        -: 1300:    {
      136: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
      308: 1309:  if (toFlag == 1)
branch  0 taken 40 (fallthrough)
branch  1 taken 268
        -: 1310:    {
       40: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       40: 1312:      state->deckCount[player]++;
        -: 1313:    }
      268: 1314:  else if (toFlag == 2)
branch  0 taken 224 (fallthrough)
branch  1 taken 44
        -: 1315:    {
      224: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      224: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
       44: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       44: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
      308: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
      308: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 132172 returned 100% blocks executed 100%
   132172: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
   132172: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
 16930027: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 16797855
branch  1 taken 132172 (fallthrough)
        -: 1340:    {
 16797855: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 5753676 (fallthrough)
branch  1 taken 11044179
        -: 1342:	{
  5753676: 1343:	  state->coins += 1;
        -: 1344:	}
 11044179: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 5489000 (fallthrough)
branch  1 taken 5555179
        -: 1346:	{
  5489000: 1347:	  state->coins += 2;
        -: 1348:	}
  5555179: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 5489000 (fallthrough)
branch  1 taken 66179
        -: 1350:	{
  5489000: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
   132172: 1356:  state->coins += bonus;
        -: 1357:
   132172: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361://end of dominion.c
cardtest2.c:
FAILED TEST: playing card adventurer drew more than 2 cards after discarding non-treasures.
    pre: 5 post: 4
    emptyDeck: 1
FAILED TEST: playing card adventurer drew more than 2 cards after discarding non-treasures.
    pre: 0 post: -496
    emptyDeck: 1
Tests for adventurer card completed.File 'dominion.c'
Lines executed:31.95% of 601
Branches executed:32.49% of 397
Taken at least once:24.18% of 397
Calls executed:22.22% of 90
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:6
        -:    0:Programs:6
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3969540 returned 100% blocks executed 83%
  3969540:    8:int compare(const void* a, const void* b) {
  3969540:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 3969540
    #####:   10:    return 1;
  3969540:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 1058544 (fallthrough)
branch  1 taken 2910996
  1058544:   12:    return -1;
  2910996:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 66166 returned 100% blocks executed 92%
    66166:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    66166:   44:  SelectStream(1);
call    0 returned 66166
    66166:   45:  PutSeed((long)randomSeed);
call    0 returned 66166
        -:   46:  
        -:   47:  //check number of players
    66166:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 66166 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 66166
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    66166:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   727826:   57:  for (i = 0; i < 10; i++)
branch  0 taken 661660
branch  1 taken 66166 (fallthrough)
        -:   58:    {
  7278260:   59:      for (j = 0; j < 10; j++)
branch  0 taken 6616600
branch  1 taken 661660 (fallthrough)
        -:   60:        {
  6616600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 5954940 (fallthrough)
branch  1 taken 661660
branch  2 taken 0 (fallthrough)
branch  3 taken 5954940
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    66166:   73:  if (numPlayers == 2)
branch  0 taken 14 (fallthrough)
branch  1 taken 66152
        -:   74:    {
       14:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    66152:   77:  else if (numPlayers == 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 66152
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    66152:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    66166:   87:  if (numPlayers == 2)
branch  0 taken 14 (fallthrough)
branch  1 taken 66152
        -:   88:    {
       14:   89:      state->supplyCount[estate] = 8;
       14:   90:      state->supplyCount[duchy] = 8;
       14:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    66152:   95:      state->supplyCount[estate] = 12;
    66152:   96:      state->supplyCount[duchy] = 12;
    66152:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    66166:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    66166:  102:  state->supplyCount[silver] = 40;
    66166:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  1389486:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 1323320
branch  1 taken 66166 (fallthrough)
        -:  107:    {
 10917390:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 10255730
branch  1 taken 661660 (fallthrough)
        -:  109:	{
 10255730:  110:	  if (kingdomCards[j] == i)
branch  0 taken 661660 (fallthrough)
branch  1 taken 9594070
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   661660:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 595508 (fallthrough)
branch  1 taken 66152
branch  2 taken 66152 (fallthrough)
branch  3 taken 529356
        -:  114:		{
   264608:  115:		  if (numPlayers == 2){ 
branch  0 taken 0 (fallthrough)
branch  1 taken 132304
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
   132304:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   529356:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   661660:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  9594070:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   330802:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264636
branch  1 taken 66166 (fallthrough)
        -:  139:    {
   264636:  140:      state->deckCount[i] = 0;
  1058544:  141:      for (j = 0; j < 3; j++)
branch  0 taken 793908
branch  1 taken 264636 (fallthrough)
        -:  142:	{
   793908:  143:	  state->deck[i][j] = estate;
   793908:  144:	  state->deckCount[i]++;
        -:  145:	}
  2117088:  146:      for (j = 3; j < 10; j++)
branch  0 taken 1852452
branch  1 taken 264636 (fallthrough)
        -:  147:	{
  1852452:  148:	  state->deck[i][j] = copper;
  1852452:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   330802:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264636
branch  1 taken 66166 (fallthrough)
        -:  155:    {
   264636:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 264636
branch  1 taken 0 (fallthrough)
branch  2 taken 264636
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   330802:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264636
branch  1 taken 66166 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   264636:  166:      state->handCount[i] = 0;
   264636:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  1852648:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 1786482
branch  1 taken 66166 (fallthrough)
        -:  177:    {
  1786482:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    66166:  182:  state->outpostPlayed = 0;
    66166:  183:  state->phase = 0;
    66166:  184:  state->numActions = 1;
    66166:  185:  state->numBuys = 1;
    66166:  186:  state->playedCardCount = 0;
    66166:  187:  state->whoseTurn = 0;
    66166:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   396996:  192:  for (it = 0; it < 5; it++){
branch  0 taken 330830
branch  1 taken 66166 (fallthrough)
   330830:  193:    drawCard(state->whoseTurn, state);
call    0 returned 330830
        -:  194:  }
        -:  195:
    66166:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 66166
        -:  197:
    66166:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 265646 returned 100% blocks executed 100%
   265646:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   265646:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   265646:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1006 (fallthrough)
branch  1 taken 264640
     1006:  210:    return -1;
   264640:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 264640
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  3175644:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 2646364
branch  1 taken 264640 (fallthrough)
  2646364:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 2646364
  2646364:  216:    newDeck[newDeckPos] = state->deck[player][card];
  2646364:  217:    newDeckPos++;
  8666994:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 6020630
branch  1 taken 2646364 (fallthrough)
  6020630:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  2646364:  221:    state->deckCount[player]--;
        -:  222:  }
  2911004:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 2646364
branch  1 taken 264640 (fallthrough)
  2646364:  224:    state->deck[player][i] = newDeck[i];
  2646364:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   264640:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 10 returned 100% blocks executed 73%
       10:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       10:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       10:  237:  if (state->phase != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       10:  243:  if ( state->numActions < 1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 10
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       10:  249:  card = handCard(handPos, state);
call    0 returned 10
        -:  250:	
        -:  251:  //check if selected card is an action
       10:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 10 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 10
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       10:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 10
branch  1 taken 0 (fallthrough)
branch  2 taken 10
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       10:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       10:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 10
        -:  268:	
       10:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 10 returned 100% blocks executed 100%
       10:  315:int handCard(int handPos, struct gameState *state) {
       10:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 10
       10:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 444 returned 100% blocks executed 100%
      444:  320:int supplyCount(int card, struct gameState *state) {
      444:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 24 returned 100% blocks executed 100%
       24:  346:int whoseTurn(struct gameState *state) {
       24:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 331445 returned 100% blocks executed 100%
   331445:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   331445:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 509 (fallthrough)
branch  1 taken 330936
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      513:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 4
branch  1 taken 509 (fallthrough)
        4:  534:      state->deck[player][i] = state->discard[player][i];
        4:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      509:  538:    state->deckCount[player] = state->discardCount[player];
      509:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      509:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 509
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      509:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      509:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      509:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      509:  559:    if (deckCounter == 0)
branch  0 taken 505 (fallthrough)
branch  1 taken 4
      505:  560:      return -1;
        -:  561:
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:    state->deckCount[player]--;
        4:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   330936:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   330936:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   330936:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   330936:  576:    state->deckCount[player]--;
   330936:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   330940:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
    #####:  587:    case curse:
    #####:  588:      return 0;
    #####:  589:    case estate:
    #####:  590:      return 2;
    #####:  591:    case duchy:
    #####:  592:      return 5;
    #####:  593:    case province:
    #####:  594:      return 8;
    #####:  595:    case copper:
    #####:  596:      return 0;
    #####:  597:    case silver:
    #####:  598:      return 3;
    #####:  599:    case gold:
    #####:  600:      return 6;
    #####:  601:    case adventurer:
    #####:  602:      return 6;
    #####:  603:    case council_room:
    #####:  604:      return 5;
    #####:  605:    case feast:
    #####:  606:      return 4;
    #####:  607:    case gardens:
    #####:  608:      return 4;
    #####:  609:    case mine:
    #####:  610:      return 5;
    #####:  611:    case remodel:
    #####:  612:      return 4;
    #####:  613:    case smithy:
    #####:  614:      return 4;
    #####:  615:    case village:
    #####:  616:      return 3;
    #####:  617:    case baron:
    #####:  618:      return 4;
    #####:  619:    case great_hall:
    #####:  620:      return 3;
    #####:  621:    case minion:
    #####:  622:      return 5;
    #####:  623:    case steward:
    #####:  624:      return 3;
    #####:  625:    case tribute:
    #####:  626:      return 5;
    #####:  627:    case ambassador:
    #####:  628:      return 3;
    #####:  629:    case cutpurse:
    #####:  630:      return 4;
    #####:  631:    case embargo: 
    #####:  632:      return 2;
    #####:  633:    case outpost:
    #####:  634:      return 5;
    #####:  635:    case salvager:
    #####:  636:      return 4;
    #####:  637:    case sea_hag:
    #####:  638:      return 4;
    #####:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function playAdventurer called 4 returned 100% blocks executed 100%
        4:  646:int playAdventurer(int drawntreasure, int currentPlayer, int cardDrawn, int *temphand, int z, struct gameState *state) {
      515:  647:	while (drawntreasure<2) {
branch  0 taken 507
branch  1 taken 4 (fallthrough)
      507:  648:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 501 (fallthrough)
branch  1 taken 6
      501:  649:			shuffle(currentPlayer, state);
call    0 returned 501
        -:  650:		}
      507:  651:		drawCard(currentPlayer, state);
call    0 returned 507
      507:  652:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
      507:  653:		if (cardDrawn == copper || cardDrawn == gold)
branch  0 taken 499 (fallthrough)
branch  1 taken 8
branch  2 taken 0 (fallthrough)
branch  3 taken 499
        8:  654:			drawntreasure++;
        -:  655:		else {
      499:  656:			temphand[z] = cardDrawn;
      499:  657:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      499:  658:			z++;
        -:  659:		}
        -:  660:	}
      507:  661:	while (z - 1 >= 0) {
branch  0 taken 499
branch  1 taken 4 (fallthrough)
      499:  662:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
      499:  663:		z = z - 1;
        -:  664:	}
        4:  665:	return 0;
        -:  666:}
        -:  667:
function playSmithy called 10 returned 100% blocks executed 100%
       10:  668:int playSmithy(int i, int currentPlayer, int handPos, struct gameState *state) {
        -:  669:	//+3 Cards
       40:  670:	for (i = 0; i < 3; i++)
branch  0 taken 30
branch  1 taken 10 (fallthrough)
        -:  671:	{
       30:  672:		drawCard(currentPlayer, state);
call    0 returned 30
        -:  673:	}
        -:  674:
        -:  675:	//discard card from hand
       10:  676:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 10
       10:  677:	return 0;
        -:  678:}
        -:  679:
function playVillage called 0 returned 0% blocks executed 0%
    #####:  680:int playVillage(int currentPlayer, int handPos, struct gameState *state) {
        -:  681:	//+1 Card
    #####:  682:	drawCard(currentPlayer, state);
call    0 never executed
        -:  683:
        -:  684:	//+2 Actions
    #####:  685:	state->numActions = 2;
        -:  686:
        -:  687:	//discard played card from hand
    #####:  688:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  689:	return 0;
        -:  690:}
        -:  691:
function playMinion called 0 returned 0% blocks executed 0%
    #####:  692:int playMinion(int i, int j, int currentPlayer, int handPos, int choice1, int choice2, struct gameState *state) {
        -:  693:	//+1 action
    #####:  694:	state->numActions++;
        -:  695:
        -:  696:	//discard card from hand
    #####:  697:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:	if (1)		//+2 coins
        -:  700:	{
    #####:  701:		state->coins = state->coins + 2;
        -:  702:	}
        -:  703:
        -:  704:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  705:	{
        -:  706:		//discard hand
        -:  707:		while (numHandCards(state) > 0)
        -:  708:		{
        -:  709:			discardCard(handPos, currentPlayer, state, 0);
        -:  710:		}
        -:  711:
        -:  712:		//draw 4
        -:  713:		for (i = 0; i < 4; i++)
        -:  714:		{
        -:  715:			drawCard(currentPlayer, state);
        -:  716:		}
        -:  717:
        -:  718:		//other players discard hand and redraw if hand size > 4
        -:  719:		for (i = 0; i < state->numPlayers; i++)
        -:  720:		{
        -:  721:			if (i != currentPlayer)
        -:  722:			{
        -:  723:				if (state->handCount[i] > 4)
        -:  724:				{
        -:  725:					//discard hand
        -:  726:					while (state->handCount[i] > 0)
        -:  727:					{
        -:  728:						discardCard(handPos, i, state, 0);
        -:  729:					}
        -:  730:
        -:  731:					//draw 4
        -:  732:					for (j = 0; j < 4; j++)
        -:  733:					{
        -:  734:						drawCard(i, state);
        -:  735:					}
        -:  736:				}
        -:  737:			}
        -:  738:		}
        -:  739:
        -:  740:	}
    #####:  741:	return 0;
        -:  742:}
        -:  743:
function playCutpurse called 0 returned 0% blocks executed 0%
    #####:  744:int playCutpurse(int i, int j, int k, int currentPlayer, int handPos, struct gameState *state) {
    #####:  745:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  746:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  747:	{
    #####:  748:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  749:		{
    #####:  750:			for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  751:			{
    #####:  752:				if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  753:				{
    #####:  754:					discardCard(j, i, state, 0);
call    0 never executed
    #####:  755:					break;
        -:  756:				}
    #####:  757:				if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  758:				{
    #####:  759:					for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  760:					{
        -:  761:						if (DEBUG)
        -:  762:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  763:					}
    #####:  764:					break;
        -:  765:				}
        -:  766:			}
        -:  767:
        -:  768:		}
        -:  769:
        -:  770:	}
        -:  771:
        -:  772:	//discard played card from hand
    #####:  773:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  774:
    #####:  775:	return 0;
        -:  776:}
        -:  777:
        -:  778:
        -:  779:
function cardEffect called 14 returned 100% blocks executed 5%
       14:  780:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  781:{
       14:  782:  int i = 0;
       14:  783:  int j = 0;
       14:  784:  int k = 0;
        -:  785:  int x;
        -:  786:  int index;
       14:  787:  int currentPlayer = whoseTurn(state);
call    0 returned 14
       14:  788:  int nextPlayer = currentPlayer + 1;
        -:  789:
       14:  790:  int tributeRevealedCards[2] = {-1, -1};
        -:  791:  int temphand[MAX_HAND];// moved above the if statement
       14:  792:  int drawntreasure=0;
       14:  793:  int cardDrawn = 0;
       14:  794:  int z = 0;// this is the counter for the temp hand
       14:  795:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 7 (fallthrough)
branch  1 taken 7
        7:  796:    nextPlayer = 0;
        -:  797:  }
        -:  798:  
        -:  799:	
        -:  800:  //uses switch to select card and perform actions
       14:  801:  switch( card ) 
branch  0 taken 4
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 10
branch  7 taken 0
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  802:    {
        4:  803:    case adventurer:
        -:  804:		//Custom function 1/5: Adventurer
        4:  805:		playAdventurer(drawntreasure, currentPlayer, cardDrawn, temphand, z, state);
call    0 returned 4
        4:  806:		return 0;
        -:  807:			
    #####:  808:    case council_room:
        -:  809:      //+4 Cards
    #####:  810:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  811:	{
    #####:  812:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  813:	}
        -:  814:			
        -:  815:      //+1 Buy
    #####:  816:      state->numBuys++;
        -:  817:			
        -:  818:      //Each other player draws a card
    #####:  819:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  820:	{
    #####:  821:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  822:	    {
    #####:  823:	      drawCard(i, state);
call    0 never executed
        -:  824:	    }
        -:  825:	}
        -:  826:			
        -:  827:      //put played card in played card pile
    #####:  828:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  829:			
    #####:  830:      return 0;
        -:  831:			
    #####:  832:    case feast:
        -:  833:      //gain card with cost up to 5
        -:  834:      //Backup hand
    #####:  835:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  836:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  837:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  838:      }
        -:  839:      //Backup hand
        -:  840:
        -:  841:      //Update Coins for Buy
    #####:  842:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  843:      x = 1;//Condition to loop on
    #####:  844:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  845:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  846:	  if (DEBUG)
        -:  847:	    printf("None of that card left, sorry!\n");
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  851:	  }
        -:  852:	}
    #####:  853:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  854:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  858:	  }
        -:  859:	}
        -:  860:	else{
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
    #####:  866:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  867:	  x = 0;//No more buying cards
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
        -:  873:	}
        -:  874:      }     
        -:  875:
        -:  876:      //Reset Hand
    #####:  877:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  878:	state->hand[currentPlayer][i] = temphand[i];
    #####:  879:	temphand[i] = -1;
        -:  880:      }
        -:  881:      //Reset Hand
        -:  882:      			
    #####:  883:      return 0;
        -:  884:			
    #####:  885:    case gardens:
    #####:  886:      return -1;
        -:  887:			
    #####:  888:    case mine:
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:		
    #####:  896:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  897:	{
    #####:  898:	  return -1;
        -:  899:	}
        -:  900:
    #####:  901:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  902:	{
    #####:  903:	  return -1;
        -:  904:	}
        -:  905:
    #####:  906:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  907:
        -:  908:      //discard card from hand
    #####:  909:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  910:
        -:  911:      //discard trashed card
    #####:  912:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  913:	{
    #####:  914:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  915:	    {
    #####:  916:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  917:	      break;
        -:  918:	    }
        -:  919:	}
        -:  920:			
    #####:  921:      return 0;
        -:  922:			
    #####:  923:    case remodel:
    #####:  924:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  925:
    #####:  926:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  927:	{
    #####:  928:	  return -1;
        -:  929:	}
        -:  930:
    #####:  931:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  932:
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  935:
        -:  936:      //discard trashed card
    #####:  937:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  940:	    {
    #####:  941:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  942:	      break;
        -:  943:	    }
        -:  944:	}
        -:  945:
        -:  946:
    #####:  947:      return 0;
        -:  948:		
       10:  949:    case smithy:
        -:  950:		//Custom function 2/5: Smithy
       10:  951:		playSmithy(i, currentPlayer, handPos, state);
call    0 returned 10
       10:  952:		return 0;
        -:  953:		
    #####:  954:    case village:
        -:  955:		//Custom function 3/5: Village
    #####:  956:		playVillage(currentPlayer, handPos, state);
call    0 never executed
    #####:  957:		return 0;
        -:  958:		
    #####:  959:    case baron:
    #####:  960:      state->numBuys++;//Increase buys by 1!
    #####:  961:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  962:	int p = 0;//Iterator for hand!
    #####:  963:	int card_not_discarded = 1;//Flag for discard set!
    #####:  964:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  965:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  966:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  967:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  968:	    state->discardCount[currentPlayer]++;
    #####:  969:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  970:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  971:	    }
    #####:  972:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  973:	    state->handCount[currentPlayer]--;
    #####:  974:	    card_not_discarded = 0;//Exit the loop
        -:  975:	  }
    #####:  976:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  977:	    if(DEBUG) {
        -:  978:	      printf("No estate cards in your hand, invalid choice\n");
        -:  979:	      printf("Must gain an estate if there are any\n");
        -:  980:	    }
    #####:  981:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  982:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  983:	      state->supplyCount[estate]--;//Decrement estates
    #####:  984:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  985:		isGameOver(state);
call    0 never executed
        -:  986:	      }
        -:  987:	    }
    #####:  988:	    card_not_discarded = 0;//Exit the loop
        -:  989:	  }
        -:  990:			    
        -:  991:	  else{
    #####:  992:	    p++;//Next card
        -:  993:	  }
        -:  994:	}
        -:  995:      }
        -:  996:			    
        -:  997:      else{
    #####:  998:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  999:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1000:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1001:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:	    isGameOver(state);
call    0 never executed
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      
    #####: 1008:      return 0;
        -: 1009:		
    #####: 1010:    case great_hall:
        -: 1011:      //+1 Card
    #####: 1012:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1013:			
        -: 1014:      //+1 Actions
    #####: 1015:      state->numActions++;
        -: 1016:			
        -: 1017:      //discard card from hand
    #####: 1018:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1019:      return 0;
        -: 1020:		
    #####: 1021:    case minion:
        -: 1022:		//Custom function 4/5: Minion
    #####: 1023:		playMinion(i, j, currentPlayer, handPos, choice1, choice2, state);
call    0 never executed
    #####: 1024:		return 0;
        -: 1025:		
    #####: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
        -: 1029:	  //+2 cards
    #####: 1030:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1031:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1032:	}
    #####: 1033:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
        -: 1035:	  //+2 coins
    #####: 1036:	  state->coins = state->coins + 2;
        -: 1037:	}
        -: 1038:      else
        -: 1039:	{
        -: 1040:	  //trash 2 cards in hand
    #####: 1041:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1042:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1043:	}
        -: 1044:			
        -: 1045:      //discard card from hand
    #####: 1046:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1047:      return 0;
        -: 1048:		
    #####: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1051:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	  state->deckCount[nextPlayer]--;
        -: 1054:	}
    #####: 1055:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:	  state->discardCount[nextPlayer]--;
        -: 1058:	}
        -: 1059:	else{
        -: 1060:	  //No Card to Reveal
        -: 1061:	  if (DEBUG){
        -: 1062:	    printf("No cards to reveal\n");
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:	    
        -: 1067:      else{
    #####: 1068:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1070:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:	    state->deckCount[nextPlayer]++;
    #####: 1072:	    state->discard[nextPlayer][i] = -1;
    #####: 1073:	    state->discardCount[nextPlayer]--;
        -: 1074:	  }
        -: 1075:			    
    #####: 1076:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1077:	} 
    #####: 1078:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
    #####: 1081:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
        -: 1084:      }    
        -: 1085:		       
    #####: 1086:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1087:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:	state->playedCardCount++;
    #####: 1089:	tributeRevealedCards[1] = -1;
        -: 1090:      }
        -: 1091:
    #####: 1092:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1093:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        -: 1096:		    
    #####: 1097:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1098:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1099:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1100:	}
        -: 1101:	else{//Action Card
    #####: 1102:	  state->numActions = state->numActions + 2;
        -: 1103:	}
        -: 1104:      }
        -: 1105:	    
    #####: 1106:      return 0;
        -: 1107:		
    #####: 1108:    case ambassador:
    #####: 1109:      j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
    #####: 1116:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1124:	    {
    #####: 1125:	      j++;
        -: 1126:	    }
        -: 1127:	}
    #####: 1128:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;				
        -: 1131:	}
        -: 1132:
        -: 1133:      if (DEBUG) 
        -: 1134:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:      //increase supply count for choosen card by amount being discarded
    #####: 1137:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:			
        -: 1139:      //each other player gains a copy of revealed card
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1145:	    }
        -: 1146:	}
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1150:
        -: 1151:      //trash copies of cards returned to supply
    #####: 1152:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
    #####: 1154:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1157:		{
    #####: 1158:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:		  break;
        -: 1160:		}
        -: 1161:	    }
        -: 1162:	}			
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:		
    #####: 1166:    case cutpurse:
        -: 1167:		//Custom function 5/5: Cutpurse
    #####: 1168:		playCutpurse(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1169:		return 0;
        -: 1170:
    #####: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
    #####: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
    #####: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
    #####: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
    #####: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 90 returned 100% blocks executed 89%
       90: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       90: 1260:  if (trashFlag < 1)
branch  0 taken 40 (fallthrough)
branch  1 taken 50
        -: 1261:    {
        -: 1262:      //add card to played pile
       40: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       40: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       90: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       90: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 5 (fallthrough)
branch  1 taken 85
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
        5: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
       85: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 85
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       85: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       85: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       85: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
       90: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 444 returned 100% blocks executed 100%
      444: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
      444: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 444
branch  1 taken 136 (fallthrough)
branch  2 taken 308
        -: 1300:    {
      136: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
      308: 1309:  if (toFlag == 1)
branch  0 taken 40 (fallthrough)
branch  1 taken 268
        -: 1310:    {
       40: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       40: 1312:      state->deckCount[player]++;
        -: 1313:    }
      268: 1314:  else if (toFlag == 2)
branch  0 taken 224 (fallthrough)
branch  1 taken 44
        -: 1315:    {
      224: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      224: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
       44: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       44: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
      308: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
      308: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 132176 returned 100% blocks executed 100%
   132176: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
   132176: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
 16930051: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 16797875
branch  1 taken 132176 (fallthrough)
        -: 1340:    {
 16797875: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 5753692 (fallthrough)
branch  1 taken 11044183
        -: 1342:	{
  5753692: 1343:	  state->coins += 1;
        -: 1344:	}
 11044183: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 5489000 (fallthrough)
branch  1 taken 5555183
        -: 1346:	{
  5489000: 1347:	  state->coins += 2;
        -: 1348:	}
  5555183: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 5489000 (fallthrough)
branch  1 taken 66183
        -: 1350:	{
  5489000: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
   132176: 1356:  state->coins += bonus;
        -: 1357:
   132176: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361://end of dominion.c
cardtest3.c:
FAILED TEST: playing card village did not result in numActions increasing by two.
    pre: 1 post: 1
    difference should be 1 due to playing village taking one of the two added actions.
FAILED TEST: playing card village changed the total number of cards in player 0's deck, hand, and discard.
    had 10 cards before playing village. post: 9
FAILED TEST: playing card village did not result in numActions increasing by two.
    pre: 1 post: 1
    difference should be 1 due to playing village taking one of the two added actions.
FAILED TEST: playing card village changed the total number of cards in player 0's deck, hand, and discard.
    had 5 cards before playing village. post: 4
FAILED TEST: playing card village did not result in numActions increasing by two.
    pre: 1 post: 1
    difference should be 1 due to playing village taking one of the two added actions.
FAILED TEST: playing card village changed the total number of cards in player 1's deck, hand, and discard.
    had 10 cards before playing village. post: 9
FAILED TEST: playing card village did not result in numActions increasing by two.
    pre: 1 post: 1
    difference should be 1 due to playing village taking one of the two added actions.
FAILED TEST: playing card village changed the total number of cards in player 1's deck, hand, and discard.
    had 0 cards before playing village. post: -1
Tests for village card completed.File 'dominion.c'
Lines executed:33.28% of 601
Branches executed:32.49% of 397
Taken at least once:24.43% of 397
Calls executed:25.56% of 90
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:7
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3969660 returned 100% blocks executed 83%
  3969660:    8:int compare(const void* a, const void* b) {
  3969660:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 3969660
    #####:   10:    return 1;
  3969660:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 1058576 (fallthrough)
branch  1 taken 2911084
  1058576:   12:    return -1;
  2911084:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 66170 returned 100% blocks executed 92%
    66170:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    66170:   44:  SelectStream(1);
call    0 returned 66170
    66170:   45:  PutSeed((long)randomSeed);
call    0 returned 66170
        -:   46:  
        -:   47:  //check number of players
    66170:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 66170 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 66170
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    66170:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   727870:   57:  for (i = 0; i < 10; i++)
branch  0 taken 661700
branch  1 taken 66170 (fallthrough)
        -:   58:    {
  7278700:   59:      for (j = 0; j < 10; j++)
branch  0 taken 6617000
branch  1 taken 661700 (fallthrough)
        -:   60:        {
  6617000:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 5955300 (fallthrough)
branch  1 taken 661700
branch  2 taken 0 (fallthrough)
branch  3 taken 5955300
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    66170:   73:  if (numPlayers == 2)
branch  0 taken 18 (fallthrough)
branch  1 taken 66152
        -:   74:    {
       18:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    66152:   77:  else if (numPlayers == 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 66152
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    66152:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    66170:   87:  if (numPlayers == 2)
branch  0 taken 18 (fallthrough)
branch  1 taken 66152
        -:   88:    {
       18:   89:      state->supplyCount[estate] = 8;
       18:   90:      state->supplyCount[duchy] = 8;
       18:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    66152:   95:      state->supplyCount[estate] = 12;
    66152:   96:      state->supplyCount[duchy] = 12;
    66152:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    66170:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    66170:  102:  state->supplyCount[silver] = 40;
    66170:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  1389570:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 1323400
branch  1 taken 66170 (fallthrough)
        -:  107:    {
 10918050:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 10256350
branch  1 taken 661700 (fallthrough)
        -:  109:	{
 10256350:  110:	  if (kingdomCards[j] == i)
branch  0 taken 661700 (fallthrough)
branch  1 taken 9594650
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   661700:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 595548 (fallthrough)
branch  1 taken 66152
branch  2 taken 66152 (fallthrough)
branch  3 taken 529396
        -:  114:		{
   264608:  115:		  if (numPlayers == 2){ 
branch  0 taken 0 (fallthrough)
branch  1 taken 132304
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
   132304:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   529396:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   661700:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  9594650:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   330814:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264644
branch  1 taken 66170 (fallthrough)
        -:  139:    {
   264644:  140:      state->deckCount[i] = 0;
  1058576:  141:      for (j = 0; j < 3; j++)
branch  0 taken 793932
branch  1 taken 264644 (fallthrough)
        -:  142:	{
   793932:  143:	  state->deck[i][j] = estate;
   793932:  144:	  state->deckCount[i]++;
        -:  145:	}
  2117152:  146:      for (j = 3; j < 10; j++)
branch  0 taken 1852508
branch  1 taken 264644 (fallthrough)
        -:  147:	{
  1852508:  148:	  state->deck[i][j] = copper;
  1852508:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   330814:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264644
branch  1 taken 66170 (fallthrough)
        -:  155:    {
   264644:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 264644
branch  1 taken 0 (fallthrough)
branch  2 taken 264644
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   330814:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264644
branch  1 taken 66170 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   264644:  166:      state->handCount[i] = 0;
   264644:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  1852760:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 1786590
branch  1 taken 66170 (fallthrough)
        -:  177:    {
  1786590:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    66170:  182:  state->outpostPlayed = 0;
    66170:  183:  state->phase = 0;
    66170:  184:  state->numActions = 1;
    66170:  185:  state->numBuys = 1;
    66170:  186:  state->playedCardCount = 0;
    66170:  187:  state->whoseTurn = 0;
    66170:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   397020:  192:  for (it = 0; it < 5; it++){
branch  0 taken 330850
branch  1 taken 66170 (fallthrough)
   330850:  193:    drawCard(state->whoseTurn, state);
call    0 returned 330850
        -:  194:  }
        -:  195:
    66170:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 66170
        -:  197:
    66170:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 265656 returned 100% blocks executed 100%
   265656:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   265656:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   265656:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1008 (fallthrough)
branch  1 taken 264648
     1008:  210:    return -1;
   264648:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 264648
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  3175740:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 2646444
branch  1 taken 264648 (fallthrough)
  2646444:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 2646444
  2646444:  216:    newDeck[newDeckPos] = state->deck[player][card];
  2646444:  217:    newDeckPos++;
  8667302:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 6020858
branch  1 taken 2646444 (fallthrough)
  6020858:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  2646444:  221:    state->deckCount[player]--;
        -:  222:  }
  2911092:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 2646444
branch  1 taken 264648 (fallthrough)
  2646444:  224:    state->deck[player][i] = newDeck[i];
  2646444:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   264648:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 14 returned 100% blocks executed 73%
       14:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       14:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       14:  237:  if (state->phase != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 14
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       14:  243:  if ( state->numActions < 1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 14
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       14:  249:  card = handCard(handPos, state);
call    0 returned 14
        -:  250:	
        -:  251:  //check if selected card is an action
       14:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 14 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 14
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       14:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 14
branch  1 taken 0 (fallthrough)
branch  2 taken 14
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       14:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       14:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 14
        -:  268:	
       14:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 14 returned 100% blocks executed 100%
       14:  315:int handCard(int handPos, struct gameState *state) {
       14:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 14
       14:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 444 returned 100% blocks executed 100%
      444:  320:int supplyCount(int card, struct gameState *state) {
      444:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 32 returned 100% blocks executed 100%
       32:  346:int whoseTurn(struct gameState *state) {
       32:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 331469 returned 100% blocks executed 100%
   331469:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   331469:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 511 (fallthrough)
branch  1 taken 330958
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      515:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 4
branch  1 taken 511 (fallthrough)
        4:  534:      state->deck[player][i] = state->discard[player][i];
        4:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      511:  538:    state->deckCount[player] = state->discardCount[player];
      511:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      511:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 511
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      511:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      511:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      511:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      511:  559:    if (deckCounter == 0)
branch  0 taken 507 (fallthrough)
branch  1 taken 4
      507:  560:      return -1;
        -:  561:
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:    state->deckCount[player]--;
        4:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   330958:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   330958:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   330958:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   330958:  576:    state->deckCount[player]--;
   330958:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   330962:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
    #####:  587:    case curse:
    #####:  588:      return 0;
    #####:  589:    case estate:
    #####:  590:      return 2;
    #####:  591:    case duchy:
    #####:  592:      return 5;
    #####:  593:    case province:
    #####:  594:      return 8;
    #####:  595:    case copper:
    #####:  596:      return 0;
    #####:  597:    case silver:
    #####:  598:      return 3;
    #####:  599:    case gold:
    #####:  600:      return 6;
    #####:  601:    case adventurer:
    #####:  602:      return 6;
    #####:  603:    case council_room:
    #####:  604:      return 5;
    #####:  605:    case feast:
    #####:  606:      return 4;
    #####:  607:    case gardens:
    #####:  608:      return 4;
    #####:  609:    case mine:
    #####:  610:      return 5;
    #####:  611:    case remodel:
    #####:  612:      return 4;
    #####:  613:    case smithy:
    #####:  614:      return 4;
    #####:  615:    case village:
    #####:  616:      return 3;
    #####:  617:    case baron:
    #####:  618:      return 4;
    #####:  619:    case great_hall:
    #####:  620:      return 3;
    #####:  621:    case minion:
    #####:  622:      return 5;
    #####:  623:    case steward:
    #####:  624:      return 3;
    #####:  625:    case tribute:
    #####:  626:      return 5;
    #####:  627:    case ambassador:
    #####:  628:      return 3;
    #####:  629:    case cutpurse:
    #####:  630:      return 4;
    #####:  631:    case embargo: 
    #####:  632:      return 2;
    #####:  633:    case outpost:
    #####:  634:      return 5;
    #####:  635:    case salvager:
    #####:  636:      return 4;
    #####:  637:    case sea_hag:
    #####:  638:      return 4;
    #####:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function playAdventurer called 4 returned 100% blocks executed 100%
        4:  646:int playAdventurer(int drawntreasure, int currentPlayer, int cardDrawn, int *temphand, int z, struct gameState *state) {
      515:  647:	while (drawntreasure<2) {
branch  0 taken 507
branch  1 taken 4 (fallthrough)
      507:  648:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 501 (fallthrough)
branch  1 taken 6
      501:  649:			shuffle(currentPlayer, state);
call    0 returned 501
        -:  650:		}
      507:  651:		drawCard(currentPlayer, state);
call    0 returned 507
      507:  652:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
      507:  653:		if (cardDrawn == copper || cardDrawn == gold)
branch  0 taken 499 (fallthrough)
branch  1 taken 8
branch  2 taken 0 (fallthrough)
branch  3 taken 499
        8:  654:			drawntreasure++;
        -:  655:		else {
      499:  656:			temphand[z] = cardDrawn;
      499:  657:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      499:  658:			z++;
        -:  659:		}
        -:  660:	}
      507:  661:	while (z - 1 >= 0) {
branch  0 taken 499
branch  1 taken 4 (fallthrough)
      499:  662:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
      499:  663:		z = z - 1;
        -:  664:	}
        4:  665:	return 0;
        -:  666:}
        -:  667:
function playSmithy called 10 returned 100% blocks executed 100%
       10:  668:int playSmithy(int i, int currentPlayer, int handPos, struct gameState *state) {
        -:  669:	//+3 Cards
       40:  670:	for (i = 0; i < 3; i++)
branch  0 taken 30
branch  1 taken 10 (fallthrough)
        -:  671:	{
       30:  672:		drawCard(currentPlayer, state);
call    0 returned 30
        -:  673:	}
        -:  674:
        -:  675:	//discard card from hand
       10:  676:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 10
       10:  677:	return 0;
        -:  678:}
        -:  679:
function playVillage called 4 returned 100% blocks executed 100%
        4:  680:int playVillage(int currentPlayer, int handPos, struct gameState *state) {
        -:  681:	//+1 Card
        4:  682:	drawCard(currentPlayer, state);
call    0 returned 4
        -:  683:
        -:  684:	//+2 Actions
        4:  685:	state->numActions = 2;
        -:  686:
        -:  687:	//discard played card from hand
        4:  688:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        4:  689:	return 0;
        -:  690:}
        -:  691:
function playMinion called 0 returned 0% blocks executed 0%
    #####:  692:int playMinion(int i, int j, int currentPlayer, int handPos, int choice1, int choice2, struct gameState *state) {
        -:  693:	//+1 action
    #####:  694:	state->numActions++;
        -:  695:
        -:  696:	//discard card from hand
    #####:  697:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:	if (1)		//+2 coins
        -:  700:	{
    #####:  701:		state->coins = state->coins + 2;
        -:  702:	}
        -:  703:
        -:  704:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  705:	{
        -:  706:		//discard hand
        -:  707:		while (numHandCards(state) > 0)
        -:  708:		{
        -:  709:			discardCard(handPos, currentPlayer, state, 0);
        -:  710:		}
        -:  711:
        -:  712:		//draw 4
        -:  713:		for (i = 0; i < 4; i++)
        -:  714:		{
        -:  715:			drawCard(currentPlayer, state);
        -:  716:		}
        -:  717:
        -:  718:		//other players discard hand and redraw if hand size > 4
        -:  719:		for (i = 0; i < state->numPlayers; i++)
        -:  720:		{
        -:  721:			if (i != currentPlayer)
        -:  722:			{
        -:  723:				if (state->handCount[i] > 4)
        -:  724:				{
        -:  725:					//discard hand
        -:  726:					while (state->handCount[i] > 0)
        -:  727:					{
        -:  728:						discardCard(handPos, i, state, 0);
        -:  729:					}
        -:  730:
        -:  731:					//draw 4
        -:  732:					for (j = 0; j < 4; j++)
        -:  733:					{
        -:  734:						drawCard(i, state);
        -:  735:					}
        -:  736:				}
        -:  737:			}
        -:  738:		}
        -:  739:
        -:  740:	}
    #####:  741:	return 0;
        -:  742:}
        -:  743:
function playCutpurse called 0 returned 0% blocks executed 0%
    #####:  744:int playCutpurse(int i, int j, int k, int currentPlayer, int handPos, struct gameState *state) {
    #####:  745:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  746:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  747:	{
    #####:  748:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  749:		{
    #####:  750:			for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  751:			{
    #####:  752:				if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  753:				{
    #####:  754:					discardCard(j, i, state, 0);
call    0 never executed
    #####:  755:					break;
        -:  756:				}
    #####:  757:				if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  758:				{
    #####:  759:					for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  760:					{
        -:  761:						if (DEBUG)
        -:  762:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  763:					}
    #####:  764:					break;
        -:  765:				}
        -:  766:			}
        -:  767:
        -:  768:		}
        -:  769:
        -:  770:	}
        -:  771:
        -:  772:	//discard played card from hand
    #####:  773:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  774:
    #####:  775:	return 0;
        -:  776:}
        -:  777:
        -:  778:
        -:  779:
function cardEffect called 18 returned 100% blocks executed 6%
       18:  780:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  781:{
       18:  782:  int i = 0;
       18:  783:  int j = 0;
       18:  784:  int k = 0;
        -:  785:  int x;
        -:  786:  int index;
       18:  787:  int currentPlayer = whoseTurn(state);
call    0 returned 18
       18:  788:  int nextPlayer = currentPlayer + 1;
        -:  789:
       18:  790:  int tributeRevealedCards[2] = {-1, -1};
        -:  791:  int temphand[MAX_HAND];// moved above the if statement
       18:  792:  int drawntreasure=0;
       18:  793:  int cardDrawn = 0;
       18:  794:  int z = 0;// this is the counter for the temp hand
       18:  795:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 9 (fallthrough)
branch  1 taken 9
        9:  796:    nextPlayer = 0;
        -:  797:  }
        -:  798:  
        -:  799:	
        -:  800:  //uses switch to select card and perform actions
       18:  801:  switch( card ) 
branch  0 taken 4
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 10
branch  7 taken 4
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  802:    {
        4:  803:    case adventurer:
        -:  804:		//Custom function 1/5: Adventurer
        4:  805:		playAdventurer(drawntreasure, currentPlayer, cardDrawn, temphand, z, state);
call    0 returned 4
        4:  806:		return 0;
        -:  807:			
    #####:  808:    case council_room:
        -:  809:      //+4 Cards
    #####:  810:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  811:	{
    #####:  812:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  813:	}
        -:  814:			
        -:  815:      //+1 Buy
    #####:  816:      state->numBuys++;
        -:  817:			
        -:  818:      //Each other player draws a card
    #####:  819:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  820:	{
    #####:  821:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  822:	    {
    #####:  823:	      drawCard(i, state);
call    0 never executed
        -:  824:	    }
        -:  825:	}
        -:  826:			
        -:  827:      //put played card in played card pile
    #####:  828:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  829:			
    #####:  830:      return 0;
        -:  831:			
    #####:  832:    case feast:
        -:  833:      //gain card with cost up to 5
        -:  834:      //Backup hand
    #####:  835:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  836:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  837:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  838:      }
        -:  839:      //Backup hand
        -:  840:
        -:  841:      //Update Coins for Buy
    #####:  842:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  843:      x = 1;//Condition to loop on
    #####:  844:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  845:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  846:	  if (DEBUG)
        -:  847:	    printf("None of that card left, sorry!\n");
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  851:	  }
        -:  852:	}
    #####:  853:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  854:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  858:	  }
        -:  859:	}
        -:  860:	else{
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
    #####:  866:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  867:	  x = 0;//No more buying cards
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
        -:  873:	}
        -:  874:      }     
        -:  875:
        -:  876:      //Reset Hand
    #####:  877:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  878:	state->hand[currentPlayer][i] = temphand[i];
    #####:  879:	temphand[i] = -1;
        -:  880:      }
        -:  881:      //Reset Hand
        -:  882:      			
    #####:  883:      return 0;
        -:  884:			
    #####:  885:    case gardens:
    #####:  886:      return -1;
        -:  887:			
    #####:  888:    case mine:
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:		
    #####:  896:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  897:	{
    #####:  898:	  return -1;
        -:  899:	}
        -:  900:
    #####:  901:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  902:	{
    #####:  903:	  return -1;
        -:  904:	}
        -:  905:
    #####:  906:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  907:
        -:  908:      //discard card from hand
    #####:  909:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  910:
        -:  911:      //discard trashed card
    #####:  912:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  913:	{
    #####:  914:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  915:	    {
    #####:  916:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  917:	      break;
        -:  918:	    }
        -:  919:	}
        -:  920:			
    #####:  921:      return 0;
        -:  922:			
    #####:  923:    case remodel:
    #####:  924:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  925:
    #####:  926:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  927:	{
    #####:  928:	  return -1;
        -:  929:	}
        -:  930:
    #####:  931:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  932:
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  935:
        -:  936:      //discard trashed card
    #####:  937:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  940:	    {
    #####:  941:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  942:	      break;
        -:  943:	    }
        -:  944:	}
        -:  945:
        -:  946:
    #####:  947:      return 0;
        -:  948:		
       10:  949:    case smithy:
        -:  950:		//Custom function 2/5: Smithy
       10:  951:		playSmithy(i, currentPlayer, handPos, state);
call    0 returned 10
       10:  952:		return 0;
        -:  953:		
        4:  954:    case village:
        -:  955:		//Custom function 3/5: Village
        4:  956:		playVillage(currentPlayer, handPos, state);
call    0 returned 4
        4:  957:		return 0;
        -:  958:		
    #####:  959:    case baron:
    #####:  960:      state->numBuys++;//Increase buys by 1!
    #####:  961:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  962:	int p = 0;//Iterator for hand!
    #####:  963:	int card_not_discarded = 1;//Flag for discard set!
    #####:  964:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  965:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  966:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  967:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  968:	    state->discardCount[currentPlayer]++;
    #####:  969:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  970:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  971:	    }
    #####:  972:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  973:	    state->handCount[currentPlayer]--;
    #####:  974:	    card_not_discarded = 0;//Exit the loop
        -:  975:	  }
    #####:  976:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  977:	    if(DEBUG) {
        -:  978:	      printf("No estate cards in your hand, invalid choice\n");
        -:  979:	      printf("Must gain an estate if there are any\n");
        -:  980:	    }
    #####:  981:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  982:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  983:	      state->supplyCount[estate]--;//Decrement estates
    #####:  984:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  985:		isGameOver(state);
call    0 never executed
        -:  986:	      }
        -:  987:	    }
    #####:  988:	    card_not_discarded = 0;//Exit the loop
        -:  989:	  }
        -:  990:			    
        -:  991:	  else{
    #####:  992:	    p++;//Next card
        -:  993:	  }
        -:  994:	}
        -:  995:      }
        -:  996:			    
        -:  997:      else{
    #####:  998:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  999:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1000:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1001:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:	    isGameOver(state);
call    0 never executed
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      
    #####: 1008:      return 0;
        -: 1009:		
    #####: 1010:    case great_hall:
        -: 1011:      //+1 Card
    #####: 1012:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1013:			
        -: 1014:      //+1 Actions
    #####: 1015:      state->numActions++;
        -: 1016:			
        -: 1017:      //discard card from hand
    #####: 1018:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1019:      return 0;
        -: 1020:		
    #####: 1021:    case minion:
        -: 1022:		//Custom function 4/5: Minion
    #####: 1023:		playMinion(i, j, currentPlayer, handPos, choice1, choice2, state);
call    0 never executed
    #####: 1024:		return 0;
        -: 1025:		
    #####: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
        -: 1029:	  //+2 cards
    #####: 1030:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1031:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1032:	}
    #####: 1033:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
        -: 1035:	  //+2 coins
    #####: 1036:	  state->coins = state->coins + 2;
        -: 1037:	}
        -: 1038:      else
        -: 1039:	{
        -: 1040:	  //trash 2 cards in hand
    #####: 1041:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1042:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1043:	}
        -: 1044:			
        -: 1045:      //discard card from hand
    #####: 1046:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1047:      return 0;
        -: 1048:		
    #####: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1051:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	  state->deckCount[nextPlayer]--;
        -: 1054:	}
    #####: 1055:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:	  state->discardCount[nextPlayer]--;
        -: 1058:	}
        -: 1059:	else{
        -: 1060:	  //No Card to Reveal
        -: 1061:	  if (DEBUG){
        -: 1062:	    printf("No cards to reveal\n");
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:	    
        -: 1067:      else{
    #####: 1068:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1070:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:	    state->deckCount[nextPlayer]++;
    #####: 1072:	    state->discard[nextPlayer][i] = -1;
    #####: 1073:	    state->discardCount[nextPlayer]--;
        -: 1074:	  }
        -: 1075:			    
    #####: 1076:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1077:	} 
    #####: 1078:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
    #####: 1081:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
        -: 1084:      }    
        -: 1085:		       
    #####: 1086:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1087:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:	state->playedCardCount++;
    #####: 1089:	tributeRevealedCards[1] = -1;
        -: 1090:      }
        -: 1091:
    #####: 1092:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1093:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        -: 1096:		    
    #####: 1097:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1098:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1099:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1100:	}
        -: 1101:	else{//Action Card
    #####: 1102:	  state->numActions = state->numActions + 2;
        -: 1103:	}
        -: 1104:      }
        -: 1105:	    
    #####: 1106:      return 0;
        -: 1107:		
    #####: 1108:    case ambassador:
    #####: 1109:      j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
    #####: 1116:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1124:	    {
    #####: 1125:	      j++;
        -: 1126:	    }
        -: 1127:	}
    #####: 1128:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;				
        -: 1131:	}
        -: 1132:
        -: 1133:      if (DEBUG) 
        -: 1134:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:      //increase supply count for choosen card by amount being discarded
    #####: 1137:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:			
        -: 1139:      //each other player gains a copy of revealed card
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1145:	    }
        -: 1146:	}
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1150:
        -: 1151:      //trash copies of cards returned to supply
    #####: 1152:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
    #####: 1154:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1157:		{
    #####: 1158:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:		  break;
        -: 1160:		}
        -: 1161:	    }
        -: 1162:	}			
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:		
    #####: 1166:    case cutpurse:
        -: 1167:		//Custom function 5/5: Cutpurse
    #####: 1168:		playCutpurse(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1169:		return 0;
        -: 1170:
    #####: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
    #####: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
    #####: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
    #####: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
    #####: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 94 returned 100% blocks executed 89%
       94: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       94: 1260:  if (trashFlag < 1)
branch  0 taken 44 (fallthrough)
branch  1 taken 50
        -: 1261:    {
        -: 1262:      //add card to played pile
       44: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       44: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       94: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       94: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 6 (fallthrough)
branch  1 taken 88
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
        6: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
       88: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 88
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       88: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       88: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       88: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
       94: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 444 returned 100% blocks executed 100%
      444: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
      444: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 444
branch  1 taken 136 (fallthrough)
branch  2 taken 308
        -: 1300:    {
      136: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
      308: 1309:  if (toFlag == 1)
branch  0 taken 40 (fallthrough)
branch  1 taken 268
        -: 1310:    {
       40: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       40: 1312:      state->deckCount[player]++;
        -: 1313:    }
      268: 1314:  else if (toFlag == 2)
branch  0 taken 224 (fallthrough)
branch  1 taken 44
        -: 1315:    {
      224: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      224: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
       44: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       44: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
      308: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
      308: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 132184 returned 100% blocks executed 100%
   132184: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
   132184: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
 16930088: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 16797904
branch  1 taken 132184 (fallthrough)
        -: 1340:    {
 16797904: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 5753715 (fallthrough)
branch  1 taken 11044189
        -: 1342:	{
  5753715: 1343:	  state->coins += 1;
        -: 1344:	}
 11044189: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 5489000 (fallthrough)
branch  1 taken 5555189
        -: 1346:	{
  5489000: 1347:	  state->coins += 2;
        -: 1348:	}
  5555189: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 5489000 (fallthrough)
branch  1 taken 66189
        -: 1350:	{
  5489000: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
   132184: 1356:  state->coins += bonus;
        -: 1357:
   132184: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361://end of dominion.c
cardtest4.c:
Tests for council_room card completed.File 'dominion.c'
Lines executed:34.78% of 601
Branches executed:34.01% of 397
Taken at least once:26.20% of 397
Calls executed:28.89% of 90
Creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 3969780 returned 100% blocks executed 83%
  3969780:    8:int compare(const void* a, const void* b) {
  3969780:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0 (fallthrough)
branch  1 taken 3969780
    #####:   10:    return 1;
  3969780:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 1058608 (fallthrough)
branch  1 taken 2911172
  1058608:   12:    return -1;
  2911172:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 66174 returned 100% blocks executed 92%
    66174:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
    66174:   44:  SelectStream(1);
call    0 returned 66174
    66174:   45:  PutSeed((long)randomSeed);
call    0 returned 66174
        -:   46:  
        -:   47:  //check number of players
    66174:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 66174 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 66174
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
    66174:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
   727914:   57:  for (i = 0; i < 10; i++)
branch  0 taken 661740
branch  1 taken 66174 (fallthrough)
        -:   58:    {
  7279140:   59:      for (j = 0; j < 10; j++)
branch  0 taken 6617400
branch  1 taken 661740 (fallthrough)
        -:   60:        {
  6617400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 5955660 (fallthrough)
branch  1 taken 661740
branch  2 taken 0 (fallthrough)
branch  3 taken 5955660
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
    66174:   73:  if (numPlayers == 2)
branch  0 taken 22 (fallthrough)
branch  1 taken 66152
        -:   74:    {
       22:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    66152:   77:  else if (numPlayers == 3)
branch  0 taken 0 (fallthrough)
branch  1 taken 66152
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    66152:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
    66174:   87:  if (numPlayers == 2)
branch  0 taken 22 (fallthrough)
branch  1 taken 66152
        -:   88:    {
       22:   89:      state->supplyCount[estate] = 8;
       22:   90:      state->supplyCount[duchy] = 8;
       22:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    66152:   95:      state->supplyCount[estate] = 12;
    66152:   96:      state->supplyCount[duchy] = 12;
    66152:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
    66174:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    66174:  102:  state->supplyCount[silver] = 40;
    66174:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
  1389654:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 1323480
branch  1 taken 66174 (fallthrough)
        -:  107:    {
 10918710:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 10256970
branch  1 taken 661740 (fallthrough)
        -:  109:	{
 10256970:  110:	  if (kingdomCards[j] == i)
branch  0 taken 661740 (fallthrough)
branch  1 taken 9595230
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
   661740:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 595588 (fallthrough)
branch  1 taken 66152
branch  2 taken 66152 (fallthrough)
branch  3 taken 529436
        -:  114:		{
   264608:  115:		  if (numPlayers == 2){ 
branch  0 taken 0 (fallthrough)
branch  1 taken 132304
    #####:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
   132304:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
   529436:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
   661740:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
  9595230:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
   330826:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264652
branch  1 taken 66174 (fallthrough)
        -:  139:    {
   264652:  140:      state->deckCount[i] = 0;
  1058608:  141:      for (j = 0; j < 3; j++)
branch  0 taken 793956
branch  1 taken 264652 (fallthrough)
        -:  142:	{
   793956:  143:	  state->deck[i][j] = estate;
   793956:  144:	  state->deckCount[i]++;
        -:  145:	}
  2117216:  146:      for (j = 3; j < 10; j++)
branch  0 taken 1852564
branch  1 taken 264652 (fallthrough)
        -:  147:	{
  1852564:  148:	  state->deck[i][j] = copper;
  1852564:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
   330826:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264652
branch  1 taken 66174 (fallthrough)
        -:  155:    {
   264652:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 264652
branch  1 taken 0 (fallthrough)
branch  2 taken 264652
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
   330826:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 264652
branch  1 taken 66174 (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
   264652:  166:      state->handCount[i] = 0;
   264652:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
  1852872:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 1786698
branch  1 taken 66174 (fallthrough)
        -:  177:    {
  1786698:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
    66174:  182:  state->outpostPlayed = 0;
    66174:  183:  state->phase = 0;
    66174:  184:  state->numActions = 1;
    66174:  185:  state->numBuys = 1;
    66174:  186:  state->playedCardCount = 0;
    66174:  187:  state->whoseTurn = 0;
    66174:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
   397044:  192:  for (it = 0; it < 5; it++){
branch  0 taken 330870
branch  1 taken 66174 (fallthrough)
   330870:  193:    drawCard(state->whoseTurn, state);
call    0 returned 330870
        -:  194:  }
        -:  195:
    66174:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 66174
        -:  197:
    66174:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 265672 returned 100% blocks executed 100%
   265672:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
   265672:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
   265672:  209:  if (state->deckCount[player] < 1)
branch  0 taken 1016 (fallthrough)
branch  1 taken 264656
     1016:  210:    return -1;
   264656:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 264656
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
  3175836:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 2646524
branch  1 taken 264656 (fallthrough)
  2646524:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 2646524
  2646524:  216:    newDeck[newDeckPos] = state->deck[player][card];
  2646524:  217:    newDeckPos++;
  8667610:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 6021086
branch  1 taken 2646524 (fallthrough)
  6021086:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
  2646524:  221:    state->deckCount[player]--;
        -:  222:  }
  2911180:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 2646524
branch  1 taken 264656 (fallthrough)
  2646524:  224:    state->deck[player][i] = newDeck[i];
  2646524:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
   264656:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 18 returned 100% blocks executed 73%
       18:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       18:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       18:  237:  if (state->phase != 0)
branch  0 taken 0 (fallthrough)
branch  1 taken 18
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       18:  243:  if ( state->numActions < 1 )
branch  0 taken 0 (fallthrough)
branch  1 taken 18
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
       18:  249:  card = handCard(handPos, state);
call    0 returned 18
        -:  250:	
        -:  251:  //check if selected card is an action
       18:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 18 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 18
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
       18:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 18
branch  1 taken 0 (fallthrough)
branch  2 taken 18
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
       18:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       18:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 18
        -:  268:	
       18:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 18 returned 100% blocks executed 100%
       18:  315:int handCard(int handPos, struct gameState *state) {
       18:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 18
       18:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 444 returned 100% blocks executed 100%
      444:  320:int supplyCount(int card, struct gameState *state) {
      444:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 40 returned 100% blocks executed 100%
       40:  346:int whoseTurn(struct gameState *state) {
       40:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 0 returned 0% blocks executed 0%
    #####:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
    #####:  395:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  396:    {
    #####:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 331509 returned 100% blocks executed 100%
   331509:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   331509:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 519 (fallthrough)
branch  1 taken 330990
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
      523:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 4
branch  1 taken 519 (fallthrough)
        4:  534:      state->deck[player][i] = state->discard[player][i];
        4:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
      519:  538:    state->deckCount[player] = state->discardCount[player];
      519:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      519:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 519
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
      519:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      519:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
      519:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      519:  559:    if (deckCounter == 0)
branch  0 taken 515 (fallthrough)
branch  1 taken 4
      515:  560:      return -1;
        -:  561:
        4:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        4:  563:    state->deckCount[player]--;
        4:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   330990:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   330990:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   330990:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   330990:  576:    state->deckCount[player]--;
   330990:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   330994:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
    #####:  587:    case curse:
    #####:  588:      return 0;
    #####:  589:    case estate:
    #####:  590:      return 2;
    #####:  591:    case duchy:
    #####:  592:      return 5;
    #####:  593:    case province:
    #####:  594:      return 8;
    #####:  595:    case copper:
    #####:  596:      return 0;
    #####:  597:    case silver:
    #####:  598:      return 3;
    #####:  599:    case gold:
    #####:  600:      return 6;
    #####:  601:    case adventurer:
    #####:  602:      return 6;
    #####:  603:    case council_room:
    #####:  604:      return 5;
    #####:  605:    case feast:
    #####:  606:      return 4;
    #####:  607:    case gardens:
    #####:  608:      return 4;
    #####:  609:    case mine:
    #####:  610:      return 5;
    #####:  611:    case remodel:
    #####:  612:      return 4;
    #####:  613:    case smithy:
    #####:  614:      return 4;
    #####:  615:    case village:
    #####:  616:      return 3;
    #####:  617:    case baron:
    #####:  618:      return 4;
    #####:  619:    case great_hall:
    #####:  620:      return 3;
    #####:  621:    case minion:
    #####:  622:      return 5;
    #####:  623:    case steward:
    #####:  624:      return 3;
    #####:  625:    case tribute:
    #####:  626:      return 5;
    #####:  627:    case ambassador:
    #####:  628:      return 3;
    #####:  629:    case cutpurse:
    #####:  630:      return 4;
    #####:  631:    case embargo: 
    #####:  632:      return 2;
    #####:  633:    case outpost:
    #####:  634:      return 5;
    #####:  635:    case salvager:
    #####:  636:      return 4;
    #####:  637:    case sea_hag:
    #####:  638:      return 4;
    #####:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function playAdventurer called 4 returned 100% blocks executed 100%
        4:  646:int playAdventurer(int drawntreasure, int currentPlayer, int cardDrawn, int *temphand, int z, struct gameState *state) {
      515:  647:	while (drawntreasure<2) {
branch  0 taken 507
branch  1 taken 4 (fallthrough)
      507:  648:		if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 501 (fallthrough)
branch  1 taken 6
      501:  649:			shuffle(currentPlayer, state);
call    0 returned 501
        -:  650:		}
      507:  651:		drawCard(currentPlayer, state);
call    0 returned 507
      507:  652:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer] - 1];//top card of hand is most recently drawn card.
      507:  653:		if (cardDrawn == copper || cardDrawn == gold)
branch  0 taken 499 (fallthrough)
branch  1 taken 8
branch  2 taken 0 (fallthrough)
branch  3 taken 499
        8:  654:			drawntreasure++;
        -:  655:		else {
      499:  656:			temphand[z] = cardDrawn;
      499:  657:			state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
      499:  658:			z++;
        -:  659:		}
        -:  660:	}
      507:  661:	while (z - 1 >= 0) {
branch  0 taken 499
branch  1 taken 4 (fallthrough)
      499:  662:		state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z - 1]; // discard all cards in play that have been drawn
      499:  663:		z = z - 1;
        -:  664:	}
        4:  665:	return 0;
        -:  666:}
        -:  667:
function playSmithy called 10 returned 100% blocks executed 100%
       10:  668:int playSmithy(int i, int currentPlayer, int handPos, struct gameState *state) {
        -:  669:	//+3 Cards
       40:  670:	for (i = 0; i < 3; i++)
branch  0 taken 30
branch  1 taken 10 (fallthrough)
        -:  671:	{
       30:  672:		drawCard(currentPlayer, state);
call    0 returned 30
        -:  673:	}
        -:  674:
        -:  675:	//discard card from hand
       10:  676:	discardCard(handPos, currentPlayer, state, 1);
call    0 returned 10
       10:  677:	return 0;
        -:  678:}
        -:  679:
function playVillage called 4 returned 100% blocks executed 100%
        4:  680:int playVillage(int currentPlayer, int handPos, struct gameState *state) {
        -:  681:	//+1 Card
        4:  682:	drawCard(currentPlayer, state);
call    0 returned 4
        -:  683:
        -:  684:	//+2 Actions
        4:  685:	state->numActions = 2;
        -:  686:
        -:  687:	//discard played card from hand
        4:  688:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        4:  689:	return 0;
        -:  690:}
        -:  691:
function playMinion called 0 returned 0% blocks executed 0%
    #####:  692:int playMinion(int i, int j, int currentPlayer, int handPos, int choice1, int choice2, struct gameState *state) {
        -:  693:	//+1 action
    #####:  694:	state->numActions++;
        -:  695:
        -:  696:	//discard card from hand
    #####:  697:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  698:
        -:  699:	if (1)		//+2 coins
        -:  700:	{
    #####:  701:		state->coins = state->coins + 2;
        -:  702:	}
        -:  703:
        -:  704:	else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  705:	{
        -:  706:		//discard hand
        -:  707:		while (numHandCards(state) > 0)
        -:  708:		{
        -:  709:			discardCard(handPos, currentPlayer, state, 0);
        -:  710:		}
        -:  711:
        -:  712:		//draw 4
        -:  713:		for (i = 0; i < 4; i++)
        -:  714:		{
        -:  715:			drawCard(currentPlayer, state);
        -:  716:		}
        -:  717:
        -:  718:		//other players discard hand and redraw if hand size > 4
        -:  719:		for (i = 0; i < state->numPlayers; i++)
        -:  720:		{
        -:  721:			if (i != currentPlayer)
        -:  722:			{
        -:  723:				if (state->handCount[i] > 4)
        -:  724:				{
        -:  725:					//discard hand
        -:  726:					while (state->handCount[i] > 0)
        -:  727:					{
        -:  728:						discardCard(handPos, i, state, 0);
        -:  729:					}
        -:  730:
        -:  731:					//draw 4
        -:  732:					for (j = 0; j < 4; j++)
        -:  733:					{
        -:  734:						drawCard(i, state);
        -:  735:					}
        -:  736:				}
        -:  737:			}
        -:  738:		}
        -:  739:
        -:  740:	}
    #####:  741:	return 0;
        -:  742:}
        -:  743:
function playCutpurse called 0 returned 0% blocks executed 0%
    #####:  744:int playCutpurse(int i, int j, int k, int currentPlayer, int handPos, struct gameState *state) {
    #####:  745:	updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  746:	for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  747:	{
    #####:  748:		if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  749:		{
    #####:  750:			for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  751:			{
    #####:  752:				if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  753:				{
    #####:  754:					discardCard(j, i, state, 0);
call    0 never executed
    #####:  755:					break;
        -:  756:				}
    #####:  757:				if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  758:				{
    #####:  759:					for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  760:					{
        -:  761:						if (DEBUG)
        -:  762:							printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  763:					}
    #####:  764:					break;
        -:  765:				}
        -:  766:			}
        -:  767:
        -:  768:		}
        -:  769:
        -:  770:	}
        -:  771:
        -:  772:	//discard played card from hand
    #####:  773:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  774:
    #####:  775:	return 0;
        -:  776:}
        -:  777:
        -:  778:
        -:  779:
function cardEffect called 22 returned 100% blocks executed 11%
       22:  780:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  781:{
       22:  782:  int i = 0;
       22:  783:  int j = 0;
       22:  784:  int k = 0;
        -:  785:  int x;
        -:  786:  int index;
       22:  787:  int currentPlayer = whoseTurn(state);
call    0 returned 22
       22:  788:  int nextPlayer = currentPlayer + 1;
        -:  789:
       22:  790:  int tributeRevealedCards[2] = {-1, -1};
        -:  791:  int temphand[MAX_HAND];// moved above the if statement
       22:  792:  int drawntreasure=0;
       22:  793:  int cardDrawn = 0;
       22:  794:  int z = 0;// this is the counter for the temp hand
       22:  795:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 11 (fallthrough)
branch  1 taken 11
       11:  796:    nextPlayer = 0;
        -:  797:  }
        -:  798:  
        -:  799:	
        -:  800:  //uses switch to select card and perform actions
       22:  801:  switch( card ) 
branch  0 taken 4
branch  1 taken 4
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 10
branch  7 taken 4
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  802:    {
        4:  803:    case adventurer:
        -:  804:		//Custom function 1/5: Adventurer
        4:  805:		playAdventurer(drawntreasure, currentPlayer, cardDrawn, temphand, z, state);
call    0 returned 4
        4:  806:		return 0;
        -:  807:			
        4:  808:    case council_room:
        -:  809:      //+4 Cards
       20:  810:      for (i = 0; i < 4; i++)
branch  0 taken 16
branch  1 taken 4 (fallthrough)
        -:  811:	{
       16:  812:	  drawCard(currentPlayer, state);
call    0 returned 16
        -:  813:	}
        -:  814:			
        -:  815:      //+1 Buy
        4:  816:      state->numBuys++;
        -:  817:			
        -:  818:      //Each other player draws a card
       12:  819:      for (i = 0; i < state->numPlayers; i++)
branch  0 taken 8
branch  1 taken 4 (fallthrough)
        -:  820:	{
        8:  821:	  if ( i != currentPlayer )
branch  0 taken 4 (fallthrough)
branch  1 taken 4
        -:  822:	    {
        4:  823:	      drawCard(i, state);
call    0 returned 4
        -:  824:	    }
        -:  825:	}
        -:  826:			
        -:  827:      //put played card in played card pile
        4:  828:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 4
        -:  829:			
        4:  830:      return 0;
        -:  831:			
    #####:  832:    case feast:
        -:  833:      //gain card with cost up to 5
        -:  834:      //Backup hand
    #####:  835:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  836:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  837:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  838:      }
        -:  839:      //Backup hand
        -:  840:
        -:  841:      //Update Coins for Buy
    #####:  842:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  843:      x = 1;//Condition to loop on
    #####:  844:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  845:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  846:	  if (DEBUG)
        -:  847:	    printf("None of that card left, sorry!\n");
        -:  848:
        -:  849:	  if (DEBUG){
        -:  850:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  851:	  }
        -:  852:	}
    #####:  853:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  854:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  855:
        -:  856:	  if (DEBUG){
        -:  857:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  858:	  }
        -:  859:	}
        -:  860:	else{
        -:  861:
        -:  862:	  if (DEBUG){
        -:  863:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  864:	  }
        -:  865:
    #####:  866:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  867:	  x = 0;//No more buying cards
        -:  868:
        -:  869:	  if (DEBUG){
        -:  870:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  871:	  }
        -:  872:
        -:  873:	}
        -:  874:      }     
        -:  875:
        -:  876:      //Reset Hand
    #####:  877:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  878:	state->hand[currentPlayer][i] = temphand[i];
    #####:  879:	temphand[i] = -1;
        -:  880:      }
        -:  881:      //Reset Hand
        -:  882:      			
    #####:  883:      return 0;
        -:  884:			
    #####:  885:    case gardens:
    #####:  886:      return -1;
        -:  887:			
    #####:  888:    case mine:
    #####:  889:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  890:
    #####:  891:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  892:	{
    #####:  893:	  return -1;
        -:  894:	}
        -:  895:		
    #####:  896:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  897:	{
    #####:  898:	  return -1;
        -:  899:	}
        -:  900:
    #####:  901:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  902:	{
    #####:  903:	  return -1;
        -:  904:	}
        -:  905:
    #####:  906:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  907:
        -:  908:      //discard card from hand
    #####:  909:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  910:
        -:  911:      //discard trashed card
    #####:  912:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  913:	{
    #####:  914:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  915:	    {
    #####:  916:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  917:	      break;
        -:  918:	    }
        -:  919:	}
        -:  920:			
    #####:  921:      return 0;
        -:  922:			
    #####:  923:    case remodel:
    #####:  924:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  925:
    #####:  926:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  927:	{
    #####:  928:	  return -1;
        -:  929:	}
        -:  930:
    #####:  931:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  932:
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  935:
        -:  936:      //discard trashed card
    #####:  937:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  938:	{
    #####:  939:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  940:	    {
    #####:  941:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  942:	      break;
        -:  943:	    }
        -:  944:	}
        -:  945:
        -:  946:
    #####:  947:      return 0;
        -:  948:		
       10:  949:    case smithy:
        -:  950:		//Custom function 2/5: Smithy
       10:  951:		playSmithy(i, currentPlayer, handPos, state);
call    0 returned 10
       10:  952:		return 0;
        -:  953:		
        4:  954:    case village:
        -:  955:		//Custom function 3/5: Village
        4:  956:		playVillage(currentPlayer, handPos, state);
call    0 returned 4
        4:  957:		return 0;
        -:  958:		
    #####:  959:    case baron:
    #####:  960:      state->numBuys++;//Increase buys by 1!
    #####:  961:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  962:	int p = 0;//Iterator for hand!
    #####:  963:	int card_not_discarded = 1;//Flag for discard set!
    #####:  964:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  965:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  966:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  967:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  968:	    state->discardCount[currentPlayer]++;
    #####:  969:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  970:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  971:	    }
    #####:  972:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  973:	    state->handCount[currentPlayer]--;
    #####:  974:	    card_not_discarded = 0;//Exit the loop
        -:  975:	  }
    #####:  976:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  977:	    if(DEBUG) {
        -:  978:	      printf("No estate cards in your hand, invalid choice\n");
        -:  979:	      printf("Must gain an estate if there are any\n");
        -:  980:	    }
    #####:  981:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  982:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  983:	      state->supplyCount[estate]--;//Decrement estates
    #####:  984:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  985:		isGameOver(state);
call    0 never executed
        -:  986:	      }
        -:  987:	    }
    #####:  988:	    card_not_discarded = 0;//Exit the loop
        -:  989:	  }
        -:  990:			    
        -:  991:	  else{
    #####:  992:	    p++;//Next card
        -:  993:	  }
        -:  994:	}
        -:  995:      }
        -:  996:			    
        -:  997:      else{
    #####:  998:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  999:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1000:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1001:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:	    isGameOver(state);
call    0 never executed
        -: 1003:	  }
        -: 1004:	}
        -: 1005:      }
        -: 1006:	    
        -: 1007:      
    #####: 1008:      return 0;
        -: 1009:		
    #####: 1010:    case great_hall:
        -: 1011:      //+1 Card
    #####: 1012:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1013:			
        -: 1014:      //+1 Actions
    #####: 1015:      state->numActions++;
        -: 1016:			
        -: 1017:      //discard card from hand
    #####: 1018:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1019:      return 0;
        -: 1020:		
    #####: 1021:    case minion:
        -: 1022:		//Custom function 4/5: Minion
    #####: 1023:		playMinion(i, j, currentPlayer, handPos, choice1, choice2, state);
call    0 never executed
    #####: 1024:		return 0;
        -: 1025:		
    #####: 1026:    case steward:
    #####: 1027:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1028:	{
        -: 1029:	  //+2 cards
    #####: 1030:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1031:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1032:	}
    #####: 1033:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1034:	{
        -: 1035:	  //+2 coins
    #####: 1036:	  state->coins = state->coins + 2;
        -: 1037:	}
        -: 1038:      else
        -: 1039:	{
        -: 1040:	  //trash 2 cards in hand
    #####: 1041:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1042:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1043:	}
        -: 1044:			
        -: 1045:      //discard card from hand
    #####: 1046:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1047:      return 0;
        -: 1048:		
    #####: 1049:    case tribute:
    #####: 1050:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1051:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1052:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1053:	  state->deckCount[nextPlayer]--;
        -: 1054:	}
    #####: 1055:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1056:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1057:	  state->discardCount[nextPlayer]--;
        -: 1058:	}
        -: 1059:	else{
        -: 1060:	  //No Card to Reveal
        -: 1061:	  if (DEBUG){
        -: 1062:	    printf("No cards to reveal\n");
        -: 1063:	  }
        -: 1064:	}
        -: 1065:      }
        -: 1066:	    
        -: 1067:      else{
    #####: 1068:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1069:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1070:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1071:	    state->deckCount[nextPlayer]++;
    #####: 1072:	    state->discard[nextPlayer][i] = -1;
    #####: 1073:	    state->discardCount[nextPlayer]--;
        -: 1074:	  }
        -: 1075:			    
    #####: 1076:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1077:	} 
    #####: 1078:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1079:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1080:	state->deckCount[nextPlayer]--;
    #####: 1081:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1082:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1083:	state->deckCount[nextPlayer]--;
        -: 1084:      }    
        -: 1085:		       
    #####: 1086:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1087:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1088:	state->playedCardCount++;
    #####: 1089:	tributeRevealedCards[1] = -1;
        -: 1090:      }
        -: 1091:
    #####: 1092:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1093:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1094:	  state->coins += 2;
        -: 1095:	}
        -: 1096:		    
    #####: 1097:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1098:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1099:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1100:	}
        -: 1101:	else{//Action Card
    #####: 1102:	  state->numActions = state->numActions + 2;
        -: 1103:	}
        -: 1104:      }
        -: 1105:	    
    #####: 1106:      return 0;
        -: 1107:		
    #####: 1108:    case ambassador:
    #####: 1109:      j = 0;		//used to check if player has enough cards to discard
        -: 1110:
    #####: 1111:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1112:	{
    #####: 1113:	  return -1;				
        -: 1114:	}
        -: 1115:
    #####: 1116:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  return -1;
        -: 1119:	}
        -: 1120:
    #####: 1121:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1124:	    {
    #####: 1125:	      j++;
        -: 1126:	    }
        -: 1127:	}
    #####: 1128:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  return -1;				
        -: 1131:	}
        -: 1132:
        -: 1133:      if (DEBUG) 
        -: 1134:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1135:
        -: 1136:      //increase supply count for choosen card by amount being discarded
    #####: 1137:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1138:			
        -: 1139:      //each other player gains a copy of revealed card
    #####: 1140:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1145:	    }
        -: 1146:	}
        -: 1147:
        -: 1148:      //discard played card from hand
    #####: 1149:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1150:
        -: 1151:      //trash copies of cards returned to supply
    #####: 1152:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1153:	{
    #####: 1154:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1155:	    {
    #####: 1156:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1157:		{
    #####: 1158:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1159:		  break;
        -: 1160:		}
        -: 1161:	    }
        -: 1162:	}			
        -: 1163:
    #####: 1164:      return 0;
        -: 1165:		
    #####: 1166:    case cutpurse:
        -: 1167:		//Custom function 5/5: Cutpurse
    #####: 1168:		playCutpurse(i, j, k, currentPlayer, handPos, state);
call    0 never executed
    #####: 1169:		return 0;
        -: 1170:
    #####: 1171:    case embargo: 
        -: 1172:      //+2 Coins
    #####: 1173:      state->coins = state->coins + 2;
        -: 1174:			
        -: 1175:      //see if selected pile is in play
    #####: 1176:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1177:	{
    #####: 1178:	  return -1;
        -: 1179:	}
        -: 1180:			
        -: 1181:      //add embargo token to selected supply pile
    #####: 1182:      state->embargoTokens[choice1]++;
        -: 1183:			
        -: 1184:      //trash card
    #####: 1185:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1186:      return 0;
        -: 1187:		
    #####: 1188:    case outpost:
        -: 1189:      //set outpost flag
    #####: 1190:      state->outpostPlayed++;
        -: 1191:			
        -: 1192:      //discard card
    #####: 1193:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1194:      return 0;
        -: 1195:		
    #####: 1196:    case salvager:
        -: 1197:      //+1 buy
    #####: 1198:      state->numBuys++;
        -: 1199:			
    #####: 1200:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1201:	{
        -: 1202:	  //gain coins equal to trashed card
    #####: 1203:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1204:	  //trash card
    #####: 1205:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1206:	}
        -: 1207:			
        -: 1208:      //discard card
    #####: 1209:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1210:      return 0;
        -: 1211:		
    #####: 1212:    case sea_hag:
    #####: 1213:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1214:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1215:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1216:	  state->discardCount[i]++;
    #####: 1217:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1218:	}
        -: 1219:      }
    #####: 1220:      return 0;
        -: 1221:		
    #####: 1222:    case treasure_map:
        -: 1223:      //search hand for another treasure_map
    #####: 1224:      index = -1;
    #####: 1225:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1226:	{
    #####: 1227:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1228:	    {
    #####: 1229:	      index = i;
    #####: 1230:	      break;
        -: 1231:	    }
        -: 1232:	}
    #####: 1233:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1234:	{
        -: 1235:	  //trash both treasure cards
    #####: 1236:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1237:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1238:
        -: 1239:	  //gain 4 Gold cards
    #####: 1240:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1241:	    {
    #####: 1242:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1243:	    }
        -: 1244:				
        -: 1245:	  //return success
    #####: 1246:	  return 1;
        -: 1247:	}
        -: 1248:			
        -: 1249:      //no second treasure_map found in hand
    #####: 1250:      return -1;
        -: 1251:    }
        -: 1252:	
    #####: 1253:  return -1;
        -: 1254:}
        -: 1255:
function discardCard called 98 returned 100% blocks executed 89%
       98: 1256:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1257:{
        -: 1258:	
        -: 1259:  //if card is not trashed, added to Played pile 
       98: 1260:  if (trashFlag < 1)
branch  0 taken 48 (fallthrough)
branch  1 taken 50
        -: 1261:    {
        -: 1262:      //add card to played pile
       48: 1263:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       48: 1264:      state->playedCardCount++;
        -: 1265:    }
        -: 1266:	
        -: 1267:  //set played card to -1
       98: 1268:  state->hand[currentPlayer][handPos] = -1;
        -: 1269:	
        -: 1270:  //remove card from player's hand
       98: 1271:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 6 (fallthrough)
branch  1 taken 92
        -: 1272:    {
        -: 1273:      //reduce number of cards in hand
        6: 1274:      state->handCount[currentPlayer]--;
        -: 1275:    }
       92: 1276:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0 (fallthrough)
branch  1 taken 92
        -: 1277:    {
        -: 1278:      //reduce number of cards in hand
    #####: 1279:      state->handCount[currentPlayer]--;
        -: 1280:    }
        -: 1281:  else 	
        -: 1282:    {
        -: 1283:      //replace discarded card with last card in hand
       92: 1284:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1285:      //set last card to -1
       92: 1286:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1287:      //reduce number of cards in hand
       92: 1288:      state->handCount[currentPlayer]--;
        -: 1289:    }
        -: 1290:	
       98: 1291:  return 0;
        -: 1292:}
        -: 1293:
function gainCard called 444 returned 100% blocks executed 100%
      444: 1294:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1295:{
        -: 1296:  //Note: supplyPos is enum of choosen card
        -: 1297:	
        -: 1298:  //check if supply pile is empty (0) or card is not used in game (-1)
      444: 1299:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 444
branch  1 taken 136 (fallthrough)
branch  2 taken 308
        -: 1300:    {
      136: 1301:      return -1;
        -: 1302:    }
        -: 1303:	
        -: 1304:  //added card for [whoseTurn] current player:
        -: 1305:  // toFlag = 0 : add to discard
        -: 1306:  // toFlag = 1 : add to deck
        -: 1307:  // toFlag = 2 : add to hand
        -: 1308:
      308: 1309:  if (toFlag == 1)
branch  0 taken 40 (fallthrough)
branch  1 taken 268
        -: 1310:    {
       40: 1311:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
       40: 1312:      state->deckCount[player]++;
        -: 1313:    }
      268: 1314:  else if (toFlag == 2)
branch  0 taken 224 (fallthrough)
branch  1 taken 44
        -: 1315:    {
      224: 1316:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
      224: 1317:      state->handCount[player]++;
        -: 1318:    }
        -: 1319:  else
        -: 1320:    {
       44: 1321:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       44: 1322:      state->discardCount[player]++;
        -: 1323:    }
        -: 1324:	
        -: 1325:  //decrease number in supply pile
      308: 1326:  state->supplyCount[supplyPos]--;
        -: 1327:	 
      308: 1328:  return 0;
        -: 1329:}
        -: 1330:
function updateCoins called 132192 returned 100% blocks executed 100%
   132192: 1331:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1332:{
        -: 1333:  int i;
        -: 1334:	
        -: 1335:  //reset coin count
   132192: 1336:  state->coins = 0;
        -: 1337:
        -: 1338:  //add coins for each Treasure card in player's hand
 16930131: 1339:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 16797939
branch  1 taken 132192 (fallthrough)
        -: 1340:    {
 16797939: 1341:      if (state->hand[player][i] == copper)
branch  0 taken 5753742 (fallthrough)
branch  1 taken 11044197
        -: 1342:	{
  5753742: 1343:	  state->coins += 1;
        -: 1344:	}
 11044197: 1345:      else if (state->hand[player][i] == silver)
branch  0 taken 5489000 (fallthrough)
branch  1 taken 5555197
        -: 1346:	{
  5489000: 1347:	  state->coins += 2;
        -: 1348:	}
  5555197: 1349:      else if (state->hand[player][i] == gold)
branch  0 taken 5489000 (fallthrough)
branch  1 taken 66197
        -: 1350:	{
  5489000: 1351:	  state->coins += 3;
        -: 1352:	}	
        -: 1353:    }	
        -: 1354:
        -: 1355:  //add bonus
   132192: 1356:  state->coins += bonus;
        -: 1357:
   132192: 1358:  return 0;
        -: 1359:}
        -: 1360:
        -: 1361://end of dominion.c
